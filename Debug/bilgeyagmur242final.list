
bilgeyagmur242final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000468  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001363a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c2  00000000  00000000  000336d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00036098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265f1  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135be  00000000  00000000  0005e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef248  00000000  00000000  00071caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160ef7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b08  00000000  00000000  00160f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d7c 	.word	0x08003d7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003d7c 	.word	0x08003d7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
void send_char_over_USB(uint8_t ch);
void delay(uint32_t ms);
void send_value_to_terminal(uint8_t value);
uint8_t output = 0;

int main(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	 init_USB();  // Initialize USB peripheral
 80002a6:	f000 f829 	bl	80002fc <init_USB>
	    init_GPIO(); // Initialize GPIO peripheral
 80002aa:	f000 f857 	bl	800035c <init_GPIO>

	    uint8_t data = 0x41; // Character value to be sent over USB
 80002ae:	2341      	movs	r3, #65	; 0x41
 80002b0:	71fb      	strb	r3, [r7, #7]

	    while (1) {
	        send_char_over_USB(data); // Send character over USB
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f86f 	bl	8000398 <send_char_over_USB>

	        // Output character as a signal on GPIO pin PA5
	        GPIOA->BSRR = GPIO_BSRR_BS_5; // Set GPIOA Pin 5 high
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <main+0x58>)
 80002bc:	2220      	movs	r2, #32
 80002be:	619a      	str	r2, [r3, #24]

	        delay(1000); // Delay for 1 second
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f000 f880 	bl	80003c8 <delay>

	        GPIOA->BSRR = GPIO_BSRR_BR_5; // Set GPIOA Pin 5 low
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <main+0x58>)
 80002ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002ce:	619a      	str	r2, [r3, #24]

	        // Read the input from GPIO pin PA6 within 2 seconds
	        delay(2000); // Delay for 2 seconds
 80002d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d4:	f000 f878 	bl	80003c8 <delay>

	        uint8_t output = (GPIOA->IDR & GPIO_IDR_IDR_6) ? 1 : 0; // Read input from GPIOA Pin 6
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <main+0x58>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	bf14      	ite	ne
 80002e4:	2301      	movne	r3, #1
 80002e6:	2300      	moveq	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	71bb      	strb	r3, [r7, #6]

	        send_value_to_terminal(output); // Send the read value to the terminal via USB
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f89e 	bl	8000430 <send_value_to_terminal>
	    while (1) {
 80002f4:	e7dd      	b.n	80002b2 <main+0x12>
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <init_USB>:
	    }
}

void init_USB(void) {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    // Enable USB OTG FS clock
    RCC->AHB2ENR |= RCC_AHB2ENR_OTGFSEN;
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <init_USB+0x58>)
 8000302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <init_USB+0x58>)
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	6353      	str	r3, [r2, #52]	; 0x34

    // Enable USB pins (PA11: USB_DM, PA12: USB_DP)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <init_USB+0x58>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <init_USB+0x58>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER |= GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1; // Alternate function mode
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <init_USB+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <init_USB+0x5c>)
 800031e:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_11 | GPIO_OTYPER_OT_12); // Push-pull output type
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <init_USB+0x5c>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <init_USB+0x5c>)
 800032a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800032e:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11 | GPIO_OSPEEDER_OSPEEDR12; // High-speed output
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <init_USB+0x5c>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <init_USB+0x5c>)
 8000336:	f043 7370 	orr.w	r3, r3, #62914560	; 0x3c00000
 800033a:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[1] |= (10 << (4 * (11 - 8))) | (10 << (4 * (12 - 8))); // Alternate function AF10 for USB
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <init_USB+0x5c>)
 800033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <init_USB+0x5c>)
 8000342:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 8000346:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000

0800035c <init_GPIO>:

void init_GPIO(void) {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <init_GPIO+0x34>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <init_GPIO+0x34>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure GPIO pins PA5 (output) and PA6 (input)
    GPIOA->MODER |= GPIO_MODER_MODER5_0; // Output mode
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <init_GPIO+0x38>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <init_GPIO+0x38>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODER6; // Input mode
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <init_GPIO+0x38>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <init_GPIO+0x38>)
 800037e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000

08000398 <send_char_over_USB>:

void send_char_over_USB(uint8_t ch) {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE)); // Wait until TX buffer is empty
 80003a2:	bf00      	nop
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <send_char_over_USB+0x2c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f9      	beq.n	80003a4 <send_char_over_USB+0xc>
    USART1->DR = (ch & 0xFF); // Send character
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <send_char_over_USB+0x2c>)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	6053      	str	r3, [r2, #4]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40011000 	.word	0x40011000

080003c8 <delay>:

void delay(uint32_t ms) {
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (SystemCoreClock / 1000) - 1; // Configure the SysTick timer for 1ms interrupts
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <delay+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <delay+0x60>)
 80003d6:	fba2 2303 	umull	r2, r3, r2, r3
 80003da:	099b      	lsrs	r3, r3, #6
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <delay+0x64>)
 80003de:	3b01      	subs	r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0; // Reset the SysTick counter value
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <delay+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_ENABLE_Msk; // Enable the SysTick timer
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <delay+0x64>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < ms; i++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	e009      	b.n	8000408 <delay+0x40>
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // Wait until the SysTick timer reaches zero
 80003f4:	bf00      	nop
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <delay+0x64>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f9      	beq.n	80003f6 <delay+0x2e>
    for (uint32_t i = 0; i < ms; i++) {
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3f1      	bcc.n	80003f4 <delay+0x2c>
    }

    SysTick->CTRL = 0; // Disable the SysTick timer
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <delay+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	10624dd3 	.word	0x10624dd3
 800042c:	e000e010 	.word	0xe000e010

08000430 <send_value_to_terminal>:

void send_value_to_terminal(uint8_t value){
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
    // Convert the value to a string
    char buffer[10];
    sprintf(buffer, "%d\r\n", value);
 800043a:	79fa      	ldrb	r2, [r7, #7]
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4913      	ldr	r1, [pc, #76]	; (8000490 <send_value_to_terminal+0x60>)
 8000442:	4618      	mov	r0, r3
 8000444:	f003 f92a 	bl	800369c <siprintf>

    // Send the string over USB to be displayed on the terminal
    uint8_t len = strlen(buffer);
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fecf 	bl	80001f0 <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < len; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e010      	b.n	800047e <send_value_to_terminal+0x4e>
        while (!(USART1->SR & USART_SR_TXE));
 800045c:	bf00      	nop
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <send_value_to_terminal+0x64>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0f9      	beq.n	800045e <send_value_to_terminal+0x2e>
        USART1->DR = buffer[i];
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	3318      	adds	r3, #24
 800046e:	443b      	add	r3, r7
 8000470:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <send_value_to_terminal+0x64>)
 8000476:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < len; i++) {
 8000478:	7dfb      	ldrb	r3, [r7, #23]
 800047a:	3301      	adds	r3, #1
 800047c:	75fb      	strb	r3, [r7, #23]
 800047e:	7dfa      	ldrb	r2, [r7, #23]
 8000480:	7dbb      	ldrb	r3, [r7, #22]
 8000482:	429a      	cmp	r2, r3
 8000484:	d3ea      	bcc.n	800045c <send_value_to_terminal+0x2c>
    }
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	08003d94 	.word	0x08003d94
 8000494:	40011000 	.word	0x40011000

08000498 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <NMI_Handler+0x4>

080004b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <HardFault_Handler+0x4>

080004ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <BusFault_Handler+0x4>

080004c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <UsageFault_Handler+0x4>

080004cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <TIM6_DAC_IRQHandler+0x10>)
 80004e2:	f001 f9ab 	bl	800183c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000088 	.word	0x20000088

080004f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <OTG_HS_IRQHandler+0x10>)
 80004f6:	f000 f876 	bl	80005e6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200001c0 	.word	0x200001c0

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f002 ff8a 	bl	800344c <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20030000 	.word	0x20030000
 8000564:	00000400 	.word	0x00000400
 8000568:	200000d0 	.word	0x200000d0
 800056c:	200004d8 	.word	0x200004d8

08000570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005b0:	4c0b      	ldr	r4, [pc, #44]	; (80005e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005be:	f7ff ffd7 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c2:	f002 ff49 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c6:	f7ff fe6b 	bl	80002a0 <main>
  bx  lr    
 80005ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80005d8:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 80005dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80005e0:	200004d4 	.word	0x200004d4

080005e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC_IRQHandler>

080005e6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fb5c 	bl	8001cba <USB_GetMode>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	f040 80f6 	bne.w	80007f6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fb40 	bl	8001c94 <USB_ReadInterrupts>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	f000 80ec 	beq.w	80007f4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fb37 	bl	8001c94 <USB_ReadInterrupts>
 8000626:	4603      	mov	r3, r0
 8000628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000630:	d104      	bne.n	800063c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800063a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb27 	bl	8001c94 <USB_ReadInterrupts>
 8000646:	4603      	mov	r3, r0
 8000648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800064c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000650:	d104      	bne.n	800065c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800065a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fb17 	bl	8001c94 <USB_ReadInterrupts>
 8000666:	4603      	mov	r3, r0
 8000668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800066c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000670:	d104      	bne.n	800067c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800067a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fb07 	bl	8001c94 <USB_ReadInterrupts>
 8000686:	4603      	mov	r3, r0
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b02      	cmp	r3, #2
 800068e:	d103      	bne.n	8000698 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2202      	movs	r2, #2
 8000696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f001 faf9 	bl	8001c94 <USB_ReadInterrupts>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ac:	d11c      	bne.n	80006e8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006b6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10f      	bne.n	80006e8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80006c8:	2110      	movs	r1, #16
 80006ca:	6938      	ldr	r0, [r7, #16]
 80006cc:	f001 fa26 	bl	8001b1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80006d0:	6938      	ldr	r0, [r7, #16]
 80006d2:	f001 fa57 	bl	8001b84 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fafa 	bl	8001cd6 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 fe2e 	bl	8003344 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fad1 	bl	8001c94 <USB_ReadInterrupts>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80006f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006fc:	d102      	bne.n	8000704 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f001 f829 	bl	8001756 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fac3 	bl	8001c94 <USB_ReadInterrupts>
 800070e:	4603      	mov	r3, r0
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	2b08      	cmp	r3, #8
 8000716:	d106      	bne.n	8000726 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f002 fdf7 	bl	800330c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2208      	movs	r2, #8
 8000724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fab2 	bl	8001c94 <USB_ReadInterrupts>
 8000730:	4603      	mov	r3, r0
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	2b10      	cmp	r3, #16
 8000738:	d101      	bne.n	800073e <HAL_HCD_IRQHandler+0x158>
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <HAL_HCD_IRQHandler+0x15a>
 800073e:	2300      	movs	r3, #0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d012      	beq.n	800076a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f022 0210 	bic.w	r2, r2, #16
 8000752:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 ff2c 	bl	80015b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0210 	orr.w	r2, r2, #16
 8000768:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fa90 	bl	8001c94 <USB_ReadInterrupts>
 8000774:	4603      	mov	r3, r0
 8000776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800077a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800077e:	d13a      	bne.n	80007f6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fae0 	bl	8001d4a <USB_HC_ReadInterrupt>
 800078a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e025      	b.n	80007de <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	f003 030f 	and.w	r3, r3, #15
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	fa22 f303 	lsr.w	r3, r2, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d018      	beq.n	80007d8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	015a      	lsls	r2, r3, #5
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007bc:	d106      	bne.n	80007cc <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f836 	bl	8000836 <HCD_HC_IN_IRQHandler>
 80007ca:	e005      	b.n	80007d8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 fb84 	bl	8000ee0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3d4      	bcc.n	8000792 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	e000      	b.n	80007f6 <HAL_HCD_IRQHandler+0x210>
      return;
 80007f4:	bf00      	nop
    }
  }
}
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800080a:	2b01      	cmp	r3, #1
 800080c:	d101      	bne.n	8000812 <HAL_HCD_Stop+0x16>
 800080e:	2302      	movs	r3, #2
 8000810:	e00d      	b.n	800082e <HAL_HCD_Stop+0x32>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2201      	movs	r2, #1
 8000816:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fba0 	bl	8001f64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	015a      	lsls	r2, r3, #5
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4413      	add	r3, r2
 8000858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b04      	cmp	r3, #4
 8000864:	d11a      	bne.n	800089c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	4413      	add	r3, r2
 800086e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000872:	461a      	mov	r2, r3
 8000874:	2304      	movs	r3, #4
 8000876:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	212c      	movs	r1, #44	; 0x2c
 800087e:	fb01 f303 	mul.w	r3, r1, r3
 8000882:	4413      	add	r3, r2
 8000884:	3361      	adds	r3, #97	; 0x61
 8000886:	2206      	movs	r2, #6
 8000888:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fa69 	bl	8001d6c <USB_HC_Halt>
 800089a:	e0af      	b.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	015a      	lsls	r2, r3, #5
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	4413      	add	r3, r2
 80008a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b2:	d11b      	bne.n	80008ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	015a      	lsls	r2, r3, #5
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4413      	add	r3, r2
 80008bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008c0:	461a      	mov	r2, r3
 80008c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	212c      	movs	r1, #44	; 0x2c
 80008ce:	fb01 f303 	mul.w	r3, r1, r3
 80008d2:	4413      	add	r3, r2
 80008d4:	3361      	adds	r3, #97	; 0x61
 80008d6:	2207      	movs	r2, #7
 80008d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fa41 	bl	8001d6c <USB_HC_Halt>
 80008ea:	e087      	b.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	015a      	lsls	r2, r3, #5
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4413      	add	r3, r2
 80008f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	2b20      	cmp	r3, #32
 8000900:	d109      	bne.n	8000916 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800090e:	461a      	mov	r2, r3
 8000910:	2320      	movs	r3, #32
 8000912:	6093      	str	r3, [r2, #8]
 8000914:	e072      	b.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	015a      	lsls	r2, r3, #5
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	4413      	add	r3, r2
 800091e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	2b08      	cmp	r3, #8
 800092a:	d11a      	bne.n	8000962 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	015a      	lsls	r2, r3, #5
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4413      	add	r3, r2
 8000934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000938:	461a      	mov	r2, r3
 800093a:	2308      	movs	r3, #8
 800093c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	212c      	movs	r1, #44	; 0x2c
 8000944:	fb01 f303 	mul.w	r3, r1, r3
 8000948:	4413      	add	r3, r2
 800094a:	3361      	adds	r3, #97	; 0x61
 800094c:	2205      	movs	r2, #5
 800094e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fa06 	bl	8001d6c <USB_HC_Halt>
 8000960:	e04c      	b.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	015a      	lsls	r2, r3, #5
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4413      	add	r3, r2
 800096a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000978:	d11b      	bne.n	80009b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	015a      	lsls	r2, r3, #5
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4413      	add	r3, r2
 8000982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	212c      	movs	r1, #44	; 0x2c
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	4413      	add	r3, r2
 800099a:	3361      	adds	r3, #97	; 0x61
 800099c:	2208      	movs	r2, #8
 800099e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f9de 	bl	8001d6c <USB_HC_Halt>
 80009b0:	e024      	b.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	015a      	lsls	r2, r3, #5
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4413      	add	r3, r2
 80009ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c4:	2b80      	cmp	r3, #128	; 0x80
 80009c6:	d119      	bne.n	80009fc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	015a      	lsls	r2, r3, #5
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009d4:	461a      	mov	r2, r3
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	212c      	movs	r1, #44	; 0x2c
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	3361      	adds	r3, #97	; 0x61
 80009e8:	2206      	movs	r2, #6
 80009ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f9b8 	bl	8001d6c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	015a      	lsls	r2, r3, #5
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4413      	add	r3, r2
 8000a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a12:	d112      	bne.n	8000a3a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f9a4 	bl	8001d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	015a      	lsls	r2, r3, #5
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a30:	461a      	mov	r2, r3
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000a38:	e24e      	b.n	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	015a      	lsls	r2, r3, #5
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4413      	add	r3, r2
 8000a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	f040 80df 	bne.w	8000c10 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d019      	beq.n	8000a8e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	212c      	movs	r1, #44	; 0x2c
 8000a60:	fb01 f303 	mul.w	r3, r1, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	3348      	adds	r3, #72	; 0x48
 8000a68:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	0159      	lsls	r1, r3, #5
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	440b      	add	r3, r1
 8000a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000a7c:	1ad2      	subs	r2, r2, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	202c      	movs	r0, #44	; 0x2c
 8000a84:	fb00 f303 	mul.w	r3, r0, r3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3350      	adds	r3, #80	; 0x50
 8000a8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	212c      	movs	r1, #44	; 0x2c
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	3361      	adds	r3, #97	; 0x61
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	212c      	movs	r1, #44	; 0x2c
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	4413      	add	r3, r2
 8000aac:	335c      	adds	r3, #92	; 0x5c
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	015a      	lsls	r2, r3, #5
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4413      	add	r3, r2
 8000aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	212c      	movs	r1, #44	; 0x2c
 8000aca:	fb01 f303 	mul.w	r3, r1, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	333f      	adds	r3, #63	; 0x3f
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d009      	beq.n	8000aec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	212c      	movs	r1, #44	; 0x2c
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	333f      	adds	r3, #63	; 0x3f
 8000ae6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d111      	bne.n	8000b10 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f938 	bl	8001d6c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4413      	add	r3, r2
 8000b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	6093      	str	r3, [r2, #8]
 8000b0e:	e03a      	b.n	8000b86 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	212c      	movs	r1, #44	; 0x2c
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	333f      	adds	r3, #63	; 0x3f
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d009      	beq.n	8000b38 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	212c      	movs	r1, #44	; 0x2c
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	333f      	adds	r3, #63	; 0x3f
 8000b32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d126      	bne.n	8000b86 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	015a      	lsls	r2, r3, #5
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4413      	add	r3, r2
 8000b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	0151      	lsls	r1, r2, #5
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	440a      	add	r2, r1
 8000b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	212c      	movs	r1, #44	; 0x2c
 8000b5e:	fb01 f303 	mul.w	r3, r1, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	3360      	adds	r3, #96	; 0x60
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	b2d9      	uxtb	r1, r3
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	202c      	movs	r0, #44	; 0x2c
 8000b74:	fb00 f303 	mul.w	r3, r0, r3
 8000b78:	4413      	add	r3, r2
 8000b7a:	3360      	adds	r3, #96	; 0x60
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f002 fbed 	bl	8003360 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d12b      	bne.n	8000be6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	212c      	movs	r1, #44	; 0x2c
 8000b94:	fb01 f303 	mul.w	r3, r1, r3
 8000b98:	4413      	add	r3, r2
 8000b9a:	3348      	adds	r3, #72	; 0x48
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	202c      	movs	r0, #44	; 0x2c
 8000ba4:	fb00 f202 	mul.w	r2, r0, r2
 8000ba8:	440a      	add	r2, r1
 8000baa:	3240      	adds	r2, #64	; 0x40
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 818e 	beq.w	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	212c      	movs	r1, #44	; 0x2c
 8000bc2:	fb01 f303 	mul.w	r3, r1, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3354      	adds	r3, #84	; 0x54
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f083 0301 	eor.w	r3, r3, #1
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	212c      	movs	r1, #44	; 0x2c
 8000bd8:	fb01 f303 	mul.w	r3, r1, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	3354      	adds	r3, #84	; 0x54
 8000be0:	4602      	mov	r2, r0
 8000be2:	701a      	strb	r2, [r3, #0]
}
 8000be4:	e178      	b.n	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	212c      	movs	r1, #44	; 0x2c
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3354      	adds	r3, #84	; 0x54
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	212c      	movs	r1, #44	; 0x2c
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	3354      	adds	r3, #84	; 0x54
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	e163      	b.n	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	015a      	lsls	r2, r3, #5
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4413      	add	r3, r2
 8000c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	f040 80f6 	bne.w	8000e14 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	212c      	movs	r1, #44	; 0x2c
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	3361      	adds	r3, #97	; 0x61
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d109      	bne.n	8000c50 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	212c      	movs	r1, #44	; 0x2c
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	3360      	adds	r3, #96	; 0x60
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e0c9      	b.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	212c      	movs	r1, #44	; 0x2c
 8000c56:	fb01 f303 	mul.w	r3, r1, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3361      	adds	r3, #97	; 0x61
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d109      	bne.n	8000c78 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	212c      	movs	r1, #44	; 0x2c
 8000c6a:	fb01 f303 	mul.w	r3, r1, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	3360      	adds	r3, #96	; 0x60
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e0b5      	b.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	212c      	movs	r1, #44	; 0x2c
 8000c7e:	fb01 f303 	mul.w	r3, r1, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	3361      	adds	r3, #97	; 0x61
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d009      	beq.n	8000ca0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	212c      	movs	r1, #44	; 0x2c
 8000c92:	fb01 f303 	mul.w	r3, r1, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	3361      	adds	r3, #97	; 0x61
 8000c9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d150      	bne.n	8000d42 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	fb01 f303 	mul.w	r3, r1, r3
 8000caa:	4413      	add	r3, r2
 8000cac:	335c      	adds	r3, #92	; 0x5c
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	202c      	movs	r0, #44	; 0x2c
 8000cb8:	fb00 f303 	mul.w	r3, r0, r3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	335c      	adds	r3, #92	; 0x5c
 8000cc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	212c      	movs	r1, #44	; 0x2c
 8000cc8:	fb01 f303 	mul.w	r3, r1, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	335c      	adds	r3, #92	; 0x5c
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d912      	bls.n	8000cfc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	212c      	movs	r1, #44	; 0x2c
 8000cdc:	fb01 f303 	mul.w	r3, r1, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	335c      	adds	r3, #92	; 0x5c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	212c      	movs	r1, #44	; 0x2c
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3360      	adds	r3, #96	; 0x60
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000cfa:	e073      	b.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	212c      	movs	r1, #44	; 0x2c
 8000d02:	fb01 f303 	mul.w	r3, r1, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	3360      	adds	r3, #96	; 0x60
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	015a      	lsls	r2, r3, #5
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4413      	add	r3, r2
 8000d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d24:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	015a      	lsls	r2, r3, #5
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000d40:	e050      	b.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	212c      	movs	r1, #44	; 0x2c
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3361      	adds	r3, #97	; 0x61
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d122      	bne.n	8000d9c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	212c      	movs	r1, #44	; 0x2c
 8000d5c:	fb01 f303 	mul.w	r3, r1, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	3360      	adds	r3, #96	; 0x60
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	015a      	lsls	r2, r3, #5
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4413      	add	r3, r2
 8000d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	015a      	lsls	r2, r3, #5
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4413      	add	r3, r2
 8000d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d94:	461a      	mov	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e023      	b.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	212c      	movs	r1, #44	; 0x2c
 8000da2:	fb01 f303 	mul.w	r3, r1, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	3361      	adds	r3, #97	; 0x61
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b07      	cmp	r3, #7
 8000dae:	d119      	bne.n	8000de4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	212c      	movs	r1, #44	; 0x2c
 8000db6:	fb01 f303 	mul.w	r3, r1, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	335c      	adds	r3, #92	; 0x5c
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	202c      	movs	r0, #44	; 0x2c
 8000dc8:	fb00 f303 	mul.w	r3, r0, r3
 8000dcc:	440b      	add	r3, r1
 8000dce:	335c      	adds	r3, #92	; 0x5c
 8000dd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	212c      	movs	r1, #44	; 0x2c
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	3360      	adds	r3, #96	; 0x60
 8000de0:	2204      	movs	r2, #4
 8000de2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	015a      	lsls	r2, r3, #5
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4413      	add	r3, r2
 8000dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df0:	461a      	mov	r2, r3
 8000df2:	2302      	movs	r3, #2
 8000df4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2d9      	uxtb	r1, r3
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	fb00 f303 	mul.w	r3, r0, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	3360      	adds	r3, #96	; 0x60
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f002 faa7 	bl	8003360 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8000e12:	e061      	b.n	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d156      	bne.n	8000ed8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	212c      	movs	r1, #44	; 0x2c
 8000e30:	fb01 f303 	mul.w	r3, r1, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	333f      	adds	r3, #63	; 0x3f
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d111      	bne.n	8000e62 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	212c      	movs	r1, #44	; 0x2c
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	335c      	adds	r3, #92	; 0x5c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 ff86 	bl	8001d6c <USB_HC_Halt>
 8000e60:	e031      	b.n	8000ec6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	212c      	movs	r1, #44	; 0x2c
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	333f      	adds	r3, #63	; 0x3f
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	212c      	movs	r1, #44	; 0x2c
 8000e7c:	fb01 f303 	mul.w	r3, r1, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	333f      	adds	r3, #63	; 0x3f
 8000e84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d11d      	bne.n	8000ec6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	212c      	movs	r1, #44	; 0x2c
 8000e90:	fb01 f303 	mul.w	r3, r1, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	335c      	adds	r3, #92	; 0x5c
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d110      	bne.n	8000ec6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	212c      	movs	r1, #44	; 0x2c
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	3361      	adds	r3, #97	; 0x61
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 ff53 	bl	8001d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	6093      	str	r3, [r2, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	015a      	lsls	r2, r3, #5
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d11a      	bne.n	8000f46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	015a      	lsls	r2, r3, #5
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4413      	add	r3, r2
 8000f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2304      	movs	r3, #4
 8000f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	212c      	movs	r1, #44	; 0x2c
 8000f28:	fb01 f303 	mul.w	r3, r1, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3361      	adds	r3, #97	; 0x61
 8000f30:	2206      	movs	r2, #6
 8000f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 ff14 	bl	8001d6c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8000f44:	e331      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d12e      	bne.n	8000fba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	015a      	lsls	r2, r3, #5
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4413      	add	r3, r2
 8000f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	212c      	movs	r1, #44	; 0x2c
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	333d      	adds	r3, #61	; 0x3d
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f040 8313 	bne.w	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	212c      	movs	r1, #44	; 0x2c
 8000f8a:	fb01 f303 	mul.w	r3, r1, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	333d      	adds	r3, #61	; 0x3d
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	212c      	movs	r1, #44	; 0x2c
 8000f9c:	fb01 f303 	mul.w	r3, r1, r3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3360      	adds	r3, #96	; 0x60
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 feda 	bl	8001d6c <USB_HC_Halt>
}
 8000fb8:	e2f7      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	015a      	lsls	r2, r3, #5
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd0:	d112      	bne.n	8000ff8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 febb 	bl	8001d6c <USB_HC_Halt>
}
 8000ff6:	e2d8      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	015a      	lsls	r2, r3, #5
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4413      	add	r3, r2
 8001000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d140      	bne.n	8001090 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	212c      	movs	r1, #44	; 0x2c
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4413      	add	r3, r2
 800101a:	335c      	adds	r3, #92	; 0x5c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	015a      	lsls	r2, r3, #5
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4413      	add	r3, r2
 8001028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	2b40      	cmp	r3, #64	; 0x40
 8001034:	d111      	bne.n	800105a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	212c      	movs	r1, #44	; 0x2c
 800103c:	fb01 f303 	mul.w	r3, r1, r3
 8001040:	4413      	add	r3, r2
 8001042:	333d      	adds	r3, #61	; 0x3d
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	015a      	lsls	r2, r3, #5
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	4413      	add	r3, r2
 8001050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001054:	461a      	mov	r2, r3
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4413      	add	r3, r2
 8001062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001066:	461a      	mov	r2, r3
 8001068:	2301      	movs	r3, #1
 800106a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	212c      	movs	r1, #44	; 0x2c
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	4413      	add	r3, r2
 8001078:	3361      	adds	r3, #97	; 0x61
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fe6f 	bl	8001d6c <USB_HC_Halt>
}
 800108e:	e28c      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4413      	add	r3, r2
 8001098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a2:	2b40      	cmp	r3, #64	; 0x40
 80010a4:	d12c      	bne.n	8001100 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	212c      	movs	r1, #44	; 0x2c
 80010ac:	fb01 f303 	mul.w	r3, r1, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	3361      	adds	r3, #97	; 0x61
 80010b4:	2204      	movs	r2, #4
 80010b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	212c      	movs	r1, #44	; 0x2c
 80010be:	fb01 f303 	mul.w	r3, r1, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	333d      	adds	r3, #61	; 0x3d
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	212c      	movs	r1, #44	; 0x2c
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	335c      	adds	r3, #92	; 0x5c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fe40 	bl	8001d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f8:	461a      	mov	r2, r3
 80010fa:	2340      	movs	r3, #64	; 0x40
 80010fc:	6093      	str	r3, [r2, #8]
}
 80010fe:	e254      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	015a      	lsls	r2, r3, #5
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	4413      	add	r3, r2
 8001108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b08      	cmp	r3, #8
 8001114:	d11a      	bne.n	800114c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	015a      	lsls	r2, r3, #5
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4413      	add	r3, r2
 800111e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001122:	461a      	mov	r2, r3
 8001124:	2308      	movs	r3, #8
 8001126:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	212c      	movs	r1, #44	; 0x2c
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	4413      	add	r3, r2
 8001134:	3361      	adds	r3, #97	; 0x61
 8001136:	2205      	movs	r2, #5
 8001138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fe11 	bl	8001d6c <USB_HC_Halt>
}
 800114a:	e22e      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	015a      	lsls	r2, r3, #5
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	4413      	add	r3, r2
 8001154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b10      	cmp	r3, #16
 8001160:	d140      	bne.n	80011e4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	212c      	movs	r1, #44	; 0x2c
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	4413      	add	r3, r2
 800116e:	335c      	adds	r3, #92	; 0x5c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	212c      	movs	r1, #44	; 0x2c
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	4413      	add	r3, r2
 8001180:	3361      	adds	r3, #97	; 0x61
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	212c      	movs	r1, #44	; 0x2c
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	333d      	adds	r3, #61	; 0x3d
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d112      	bne.n	80011c0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	333c      	adds	r3, #60	; 0x3c
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	212c      	movs	r1, #44	; 0x2c
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	333d      	adds	r3, #61	; 0x3d
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fdce 	bl	8001d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011dc:	461a      	mov	r2, r3
 80011de:	2310      	movs	r3, #16
 80011e0:	6093      	str	r3, [r2, #8]
}
 80011e2:	e1e2      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	015a      	lsls	r2, r3, #5
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4413      	add	r3, r2
 80011ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b80      	cmp	r3, #128	; 0x80
 80011f8:	d164      	bne.n	80012c4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d111      	bne.n	8001226 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	212c      	movs	r1, #44	; 0x2c
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	3361      	adds	r3, #97	; 0x61
 8001210:	2206      	movs	r2, #6
 8001212:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fda4 	bl	8001d6c <USB_HC_Halt>
 8001224:	e044      	b.n	80012b0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	335c      	adds	r3, #92	; 0x5c
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	202c      	movs	r0, #44	; 0x2c
 800123e:	fb00 f303 	mul.w	r3, r0, r3
 8001242:	440b      	add	r3, r1
 8001244:	335c      	adds	r3, #92	; 0x5c
 8001246:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	212c      	movs	r1, #44	; 0x2c
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4413      	add	r3, r2
 8001254:	335c      	adds	r3, #92	; 0x5c
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d920      	bls.n	800129e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	335c      	adds	r3, #92	; 0x5c
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	212c      	movs	r1, #44	; 0x2c
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4413      	add	r3, r2
 800127a:	3360      	adds	r3, #96	; 0x60
 800127c:	2204      	movs	r2, #4
 800127e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	b2d9      	uxtb	r1, r3
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	202c      	movs	r0, #44	; 0x2c
 800128a:	fb00 f303 	mul.w	r3, r0, r3
 800128e:	4413      	add	r3, r2
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 f862 	bl	8003360 <HAL_HCD_HC_NotifyURBChange_Callback>
 800129c:	e008      	b.n	80012b0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	212c      	movs	r1, #44	; 0x2c
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	3360      	adds	r3, #96	; 0x60
 80012ac:	2202      	movs	r2, #2
 80012ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012bc:	461a      	mov	r2, r3
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	6093      	str	r3, [r2, #8]
}
 80012c2:	e172      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012da:	d11b      	bne.n	8001314 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	3361      	adds	r3, #97	; 0x61
 80012ea:	2208      	movs	r2, #8
 80012ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd37 	bl	8001d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4413      	add	r3, r2
 8001306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800130a:	461a      	mov	r2, r3
 800130c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001310:	6093      	str	r3, [r2, #8]
}
 8001312:	e14a      	b.n	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	f040 813f 	bne.w	80015aa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	4413      	add	r3, r2
 8001338:	3361      	adds	r3, #97	; 0x61
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d17d      	bne.n	800143c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	212c      	movs	r1, #44	; 0x2c
 8001346:	fb01 f303 	mul.w	r3, r1, r3
 800134a:	4413      	add	r3, r2
 800134c:	3360      	adds	r3, #96	; 0x60
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	212c      	movs	r1, #44	; 0x2c
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4413      	add	r3, r2
 800135e:	333f      	adds	r3, #63	; 0x3f
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d00a      	beq.n	800137c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	212c      	movs	r1, #44	; 0x2c
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	333f      	adds	r3, #63	; 0x3f
 8001374:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001376:	2b03      	cmp	r3, #3
 8001378:	f040 8100 	bne.w	800157c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d113      	bne.n	80013ac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	212c      	movs	r1, #44	; 0x2c
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	4413      	add	r3, r2
 8001390:	3355      	adds	r3, #85	; 0x55
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f083 0301 	eor.w	r3, r3, #1
 8001398:	b2d8      	uxtb	r0, r3
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	212c      	movs	r1, #44	; 0x2c
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	3355      	adds	r3, #85	; 0x55
 80013a8:	4602      	mov	r2, r0
 80013aa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f040 80e3 	bne.w	800157c <HCD_HC_OUT_IRQHandler+0x69c>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	212c      	movs	r1, #44	; 0x2c
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	334c      	adds	r3, #76	; 0x4c
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80d8 	beq.w	800157c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	334c      	adds	r3, #76	; 0x4c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	202c      	movs	r0, #44	; 0x2c
 80013e2:	fb00 f202 	mul.w	r2, r0, r2
 80013e6:	440a      	add	r2, r1
 80013e8:	3240      	adds	r2, #64	; 0x40
 80013ea:	8812      	ldrh	r2, [r2, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	202c      	movs	r0, #44	; 0x2c
 80013f6:	fb00 f202 	mul.w	r2, r0, r2
 80013fa:	440a      	add	r2, r1
 80013fc:	3240      	adds	r2, #64	; 0x40
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	fbb3 f3f2 	udiv	r3, r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80b5 	beq.w	800157c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	212c      	movs	r1, #44	; 0x2c
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3355      	adds	r3, #85	; 0x55
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2d8      	uxtb	r0, r3
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	3355      	adds	r3, #85	; 0x55
 8001436:	4602      	mov	r2, r0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e09f      	b.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	212c      	movs	r1, #44	; 0x2c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	3361      	adds	r3, #97	; 0x61
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d109      	bne.n	8001464 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	212c      	movs	r1, #44	; 0x2c
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	3360      	adds	r3, #96	; 0x60
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e08b      	b.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	212c      	movs	r1, #44	; 0x2c
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	3361      	adds	r3, #97	; 0x61
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d109      	bne.n	800148c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	212c      	movs	r1, #44	; 0x2c
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	3360      	adds	r3, #96	; 0x60
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e077      	b.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	212c      	movs	r1, #44	; 0x2c
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3361      	adds	r3, #97	; 0x61
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d109      	bne.n	80014b4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	212c      	movs	r1, #44	; 0x2c
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	3360      	adds	r3, #96	; 0x60
 80014ae:	2205      	movs	r2, #5
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e063      	b.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	212c      	movs	r1, #44	; 0x2c
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	3361      	adds	r3, #97	; 0x61
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d009      	beq.n	80014dc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	3361      	adds	r3, #97	; 0x61
 80014d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d14f      	bne.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	335c      	adds	r3, #92	; 0x5c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	202c      	movs	r0, #44	; 0x2c
 80014f4:	fb00 f303 	mul.w	r3, r0, r3
 80014f8:	440b      	add	r3, r1
 80014fa:	335c      	adds	r3, #92	; 0x5c
 80014fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	335c      	adds	r3, #92	; 0x5c
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d912      	bls.n	8001538 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	212c      	movs	r1, #44	; 0x2c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	335c      	adds	r3, #92	; 0x5c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	3360      	adds	r3, #96	; 0x60
 8001532:	2204      	movs	r2, #4
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e021      	b.n	800157c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3360      	adds	r3, #96	; 0x60
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4413      	add	r3, r2
 8001552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001560:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001568:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4413      	add	r3, r2
 8001572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001576:	461a      	mov	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001588:	461a      	mov	r2, r3
 800158a:	2302      	movs	r3, #2
 800158c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b2d9      	uxtb	r1, r3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	202c      	movs	r0, #44	; 0x2c
 8001598:	fb00 f303 	mul.w	r3, r0, r3
 800159c:	4413      	add	r3, r2
 800159e:	3360      	adds	r3, #96	; 0x60
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f001 fedb 	bl	8003360 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b08a      	sub	sp, #40	; 0x28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	0c5b      	lsrs	r3, r3, #17
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d004      	beq.n	80015f8 <HCD_RXQLVL_IRQHandler+0x46>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	f000 80a9 	beq.w	8001748 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80015f6:	e0aa      	b.n	800174e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80a6 	beq.w	800174c <HCD_RXQLVL_IRQHandler+0x19a>
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	212c      	movs	r1, #44	; 0x2c
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	3344      	adds	r3, #68	; 0x44
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 809b 	beq.w	800174c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	212c      	movs	r1, #44	; 0x2c
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3350      	adds	r3, #80	; 0x50
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	441a      	add	r2, r3
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	fb00 f303 	mul.w	r3, r0, r3
 8001634:	440b      	add	r3, r1
 8001636:	334c      	adds	r3, #76	; 0x4c
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d87a      	bhi.n	8001734 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	3344      	adds	r3, #68	; 0x44
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	b292      	uxth	r2, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f000 fac4 	bl	8001be4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3344      	adds	r3, #68	; 0x44
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	441a      	add	r2, r3
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	202c      	movs	r0, #44	; 0x2c
 8001676:	fb00 f303 	mul.w	r3, r0, r3
 800167a:	440b      	add	r3, r1
 800167c:	3344      	adds	r3, #68	; 0x44
 800167e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3350      	adds	r3, #80	; 0x50
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	441a      	add	r2, r3
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	202c      	movs	r0, #44	; 0x2c
 800169a:	fb00 f303 	mul.w	r3, r0, r3
 800169e:	440b      	add	r3, r1
 80016a0:	3350      	adds	r3, #80	; 0x50
 80016a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	0cdb      	lsrs	r3, r3, #19
 80016b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3340      	adds	r3, #64	; 0x40
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d13c      	bne.n	800174c <HCD_RXQLVL_IRQHandler+0x19a>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3354      	adds	r3, #84	; 0x54
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f083 0301 	eor.w	r3, r3, #1
 800171e:	b2d8      	uxtb	r0, r3
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3354      	adds	r3, #84	; 0x54
 800172e:	4602      	mov	r2, r0
 8001730:	701a      	strb	r2, [r3, #0]
      break;
 8001732:	e00b      	b.n	800174c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3360      	adds	r3, #96	; 0x60
 8001742:	2204      	movs	r2, #4
 8001744:	701a      	strb	r2, [r3, #0]
      break;
 8001746:	e001      	b.n	800174c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800174c:	bf00      	nop
  }
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001782:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d10b      	bne.n	80017a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 fdc5 	bl	8003328 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d132      	bne.n	8001816 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d126      	bne.n	8001810 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d113      	bne.n	80017f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80017d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d4:	d106      	bne.n	80017e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2102      	movs	r1, #2
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fa7a 	bl	8001cd6 <USB_InitFSLSPClkSel>
 80017e2:	e011      	b.n	8001808 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fa73 	bl	8001cd6 <USB_InitFSLSPClkSel>
 80017f0:	e00a      	b.n	8001808 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d106      	bne.n	8001808 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001800:	461a      	mov	r2, r3
 8001802:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001806:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f001 fdbb 	bl	8003384 <HAL_HCD_PortEnabled_Callback>
 800180e:	e002      	b.n	8001816 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 fdc5 	bl	80033a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b20      	cmp	r3, #32
 800181e:	d103      	bne.n	8001828 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d122      	bne.n	8001898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b02      	cmp	r3, #2
 800185e:	d11b      	bne.n	8001898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0202 	mvn.w	r2, #2
 8001868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8f8 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
 8001884:	e005      	b.n	8001892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8ea 	bl	8001a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8fb 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d122      	bne.n	80018ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d11b      	bne.n	80018ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0204 	mvn.w	r2, #4
 80018bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f8ce 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
 80018d8:	e005      	b.n	80018e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8c0 	bl	8001a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f8d1 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d122      	bne.n	8001940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b08      	cmp	r3, #8
 8001906:	d11b      	bne.n	8001940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0208 	mvn.w	r2, #8
 8001910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8a4 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
 800192c:	e005      	b.n	800193a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f896 	bl	8001a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f8a7 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b10      	cmp	r3, #16
 800194c:	d122      	bne.n	8001994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b10      	cmp	r3, #16
 800195a:	d11b      	bne.n	8001994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0210 	mvn.w	r2, #16
 8001964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2208      	movs	r2, #8
 800196a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f87a 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
 8001980:	e005      	b.n	800198e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f86c 	bl	8001a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f87d 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10e      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0201 	mvn.w	r2, #1
 80019b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f846 	bl	8001a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ca:	2b80      	cmp	r3, #128	; 0x80
 80019cc:	d10e      	bne.n	80019ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b80      	cmp	r3, #128	; 0x80
 80019da:	d107      	bne.n	80019ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f86c 	bl	8001ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d10e      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d107      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f842 	bl	8001a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d10e      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d107      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0220 	mvn.w	r2, #32
 8001a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f836 	bl	8001ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 0201 	bic.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <USB_FlushTxFifo+0x64>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e01b      	b.n	8001b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	daf2      	bge.n	8001b2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <USB_FlushTxFifo+0x64>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e006      	b.n	8001b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d0f0      	beq.n	8001b54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	00030d40 	.word	0x00030d40

08001b84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <USB_FlushRxFifo+0x5c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e018      	b.n	8001bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	daf2      	bge.n	8001b90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <USB_FlushRxFifo+0x5c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e006      	b.n	8001bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d0f0      	beq.n	8001bb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	00030d40 	.word	0x00030d40

08001be4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b08b      	sub	sp, #44	; 0x2c
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	e014      	b.n	8001c3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	3301      	adds	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	3301      	adds	r3, #1
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	6a3a      	ldr	r2, [r7, #32]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3e6      	bcc.n	8001c10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01e      	beq.n	8001c86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	461a      	mov	r2, r3
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	701a      	strb	r2, [r3, #0]
      i++;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	3301      	adds	r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
      pDest++;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	3301      	adds	r3, #1
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001c7a:	8bfb      	ldrh	r3, [r7, #30]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001c80:	8bfb      	ldrh	r3, [r7, #30]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ea      	bne.n	8001c5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	372c      	adds	r7, #44	; 0x2c
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf4:	f023 0303 	bic.w	r3, r3, #3
 8001cf8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001d24:	6053      	str	r3, [r2, #4]
 8001d26:	e009      	b.n	8001d3c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d106      	bne.n	8001d3c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d34:	461a      	mov	r2, r3
 8001d36:	f241 7370 	movw	r3, #6000	; 0x1770
 8001d3a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	b29b      	uxth	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0fdb      	lsrs	r3, r3, #31
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d104      	bne.n	8001dc6 <USB_HC_Halt+0x5a>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e0c8      	b.n	8001f58 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <USB_HC_Halt+0x66>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d163      	bne.n	8001e9a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	0151      	lsls	r1, r2, #5
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	440a      	add	r2, r1
 8001de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80ab 	bne.w	8001f56 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d133      	bne.n	8001e74 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	0151      	lsls	r1, r2, #5
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	440a      	add	r2, r1
 8001e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e2a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	0151      	lsls	r1, r2, #5
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	440a      	add	r2, r1
 8001e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d81d      	bhi.n	8001e96 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e70:	d0ec      	beq.n	8001e4c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001e72:	e070      	b.n	8001f56 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	0151      	lsls	r1, r2, #5
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	440a      	add	r2, r1
 8001e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001e94:	e05f      	b.n	8001f56 <USB_HC_Halt+0x1ea>
            break;
 8001e96:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001e98:	e05d      	b.n	8001f56 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	0151      	lsls	r1, r2, #5
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	440a      	add	r2, r1
 8001eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eb8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d133      	bne.n	8001f32 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	0151      	lsls	r1, r2, #5
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	440a      	add	r2, r1
 8001f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f16:	d81d      	bhi.n	8001f54 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f2e:	d0ec      	beq.n	8001f0a <USB_HC_Halt+0x19e>
 8001f30:	e011      	b.n	8001f56 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e000      	b.n	8001f56 <USB_HC_Halt+0x1ea>
          break;
 8001f54:	bf00      	nop
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3724      	adds	r7, #36	; 0x24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fdbe 	bl	8001afa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f7e:	2110      	movs	r1, #16
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fdcb 	bl	8001b1c <USB_FlushTxFifo>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fdf7 	bl	8001b84 <USB_FlushRxFifo>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e01f      	b.n	8001fe6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	461a      	mov	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d9dc      	bls.n	8001fa6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	e034      	b.n	800205c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002008:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002010:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002018:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	461a      	mov	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3301      	adds	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002038:	d80c      	bhi.n	8002054 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800204c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002050:	d0ec      	beq.n	800202c <USB_StopHost+0xc8>
 8002052:	e000      	b.n	8002056 <USB_StopHost+0xf2>
        break;
 8002054:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3301      	adds	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	d9c7      	bls.n	8001ff2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002068:	461a      	mov	r2, r3
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 32ff 	mov.w	r2, #4294967295
 8002076:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fd2d 	bl	8001ad8 <USB_EnableGlobalInt>

  return ret;
 800207e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f804 	bl	80020ac <USBH_HandleSof>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b0b      	cmp	r3, #11
 80020bc:	d10a      	bne.n	80020d4 <USBH_HandleSof+0x28>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	f000 f8ae 	bl	8002264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002108:	bf00      	nop
}
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002120:	bf00      	nop
}
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002160:	2200      	movs	r2, #0
 8002162:	4619      	mov	r1, r3
 8002164:	f000 f87e 	bl	8002264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f001 f912 	bl	80033bc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f830 	bl	8002204 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	795b      	ldrb	r3, [r3, #5]
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f82a 	bl	8002204 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80021c4:	2200      	movs	r2, #0
 80021c6:	4619      	mov	r1, r3
 80021c8:	f000 f84c 	bl	8002264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80021f2:	2200      	movs	r2, #0
 80021f4:	4619      	mov	r1, r3
 80021f6:	f000 f835 	bl	8002264 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	d80d      	bhi.n	8002232 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	33e0      	adds	r3, #224	; 0xe0
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	33e0      	adds	r3, #224	; 0xe0
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002246:	f3ef 8305 	mrs	r3, IPSR
 800224a:	607b      	str	r3, [r7, #4]
  return(result);
 800224c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <osMessagePut+0x1e>
    ticks = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002282:	f7ff ffdd 	bl	8002240 <inHandlerMode>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d018      	beq.n	80022be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800228c:	f107 0210 	add.w	r2, r7, #16
 8002290:	f107 0108 	add.w	r1, r7, #8
 8002294:	2300      	movs	r3, #0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f9aa 	bl	80025f0 <xQueueGenericSendFromISR>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <osMessagePut+0x42>
      return osErrorOS;
 80022a2:	23ff      	movs	r3, #255	; 0xff
 80022a4:	e018      	b.n	80022d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d014      	beq.n	80022d6 <osMessagePut+0x72>
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <osMessagePut+0x7c>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	e00b      	b.n	80022d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80022be:	f107 0108 	add.w	r1, r7, #8
 80022c2:	2300      	movs	r3, #0
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f894 	bl	80023f4 <xQueueGenericSend>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <osMessagePut+0x72>
      return osErrorOS;
 80022d2:	23ff      	movs	r3, #255	; 0xff
 80022d4:	e000      	b.n	80022d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d103      	bne.n	800234c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e00c      	b.n	8002366 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3308      	adds	r3, #8
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e002      	b.n	800235a <vListInsert+0x2e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d2f6      	bcs.n	8002354 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6892      	ldr	r2, [r2, #8]
 80023b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6852      	ldr	r2, [r2, #4]
 80023be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d103      	bne.n	80023d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08e      	sub	sp, #56	; 0x38
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <xQueueGenericSend+0x40>
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <xQueueGenericSend+0x44>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <xQueueGenericSend+0x46>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <xQueueGenericSend+0x60>
	__asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d103      	bne.n	8002462 <xQueueGenericSend+0x6e>
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <xQueueGenericSend+0x72>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xQueueGenericSend+0x74>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericSend+0x8e>
	__asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	623b      	str	r3, [r7, #32]
}
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002482:	f000 fd31 	bl	8002ee8 <xTaskGetSchedulerState>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <xQueueGenericSend+0x9e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <xQueueGenericSend+0xa2>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <xQueueGenericSend+0xa4>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	61fb      	str	r3, [r7, #28]
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024b2:	f000 fe39 	bl	8003128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <xQueueGenericSend+0xd4>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d129      	bne.n	800251c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ce:	f000 f92a 	bl	8002726 <prvCopyDataToQueue>
 80024d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	3324      	adds	r3, #36	; 0x24
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fbfb 	bl	8002cdc <xTaskRemoveFromEventList>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <xQueueGenericSend+0x1f8>)
 80024ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	e00a      	b.n	8002514 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002504:	4b39      	ldr	r3, [pc, #228]	; (80025ec <xQueueGenericSend+0x1f8>)
 8002506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002514:	f000 fe38 	bl	8003188 <vPortExitCritical>
				return pdPASS;
 8002518:	2301      	movs	r3, #1
 800251a:	e063      	b.n	80025e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002522:	f000 fe31 	bl	8003188 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002526:	2300      	movs	r3, #0
 8002528:	e05c      	b.n	80025e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fc33 	bl	8002da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800253a:	2301      	movs	r3, #1
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800253e:	f000 fe23 	bl	8003188 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002542:	f000 f9c5 	bl	80028d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002546:	f000 fdef 	bl	8003128 <vPortEnterCritical>
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002550:	b25b      	sxtb	r3, r3
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d103      	bne.n	8002560 <xQueueGenericSend+0x16c>
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d103      	bne.n	8002576 <xQueueGenericSend+0x182>
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002576:	f000 fe07 	bl	8003188 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800257a:	1d3a      	adds	r2, r7, #4
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fc22 	bl	8002dcc <xTaskCheckForTimeOut>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d124      	bne.n	80025d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800258e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002590:	f000 f985 	bl	800289e <prvIsQueueFull>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d018      	beq.n	80025cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	3310      	adds	r3, #16
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fb76 	bl	8002c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025aa:	f000 f926 	bl	80027fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025ae:	f000 f99d 	bl	80028ec <xTaskResumeAll>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f af7c 	bne.w	80024b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <xQueueGenericSend+0x1f8>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	e772      	b.n	80024b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ce:	f000 f914 	bl	80027fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025d2:	f000 f98b 	bl	80028ec <xTaskResumeAll>
 80025d6:	e76c      	b.n	80024b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025da:	f000 f90e 	bl	80027fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025de:	f000 f985 	bl	80028ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3738      	adds	r7, #56	; 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b090      	sub	sp, #64	; 0x40
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <xQueueGenericSendFromISR+0x3c>
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueGenericSendFromISR+0x40>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <xQueueGenericSendFromISR+0x42>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d103      	bne.n	800265a <xQueueGenericSendFromISR+0x6a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <xQueueGenericSendFromISR+0x6e>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <xQueueGenericSendFromISR+0x70>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	623b      	str	r3, [r7, #32]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800267a:	f000 fe07 	bl	800328c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800267e:	f3ef 8211 	mrs	r2, BASEPRI
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	61fa      	str	r2, [r7, #28]
 8002694:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002696:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <xQueueGenericSendFromISR+0xbc>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d12f      	bne.n	800270c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026c2:	f000 f830 	bl	8002726 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d112      	bne.n	80026f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	3324      	adds	r3, #36	; 0x24
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fafd 	bl	8002cdc <xTaskRemoveFromEventList>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00e      	beq.n	8002706 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e007      	b.n	8002706 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	b25a      	sxtb	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002706:	2301      	movs	r3, #1
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800270a:	e001      	b.n	8002710 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800270c:	2300      	movs	r3, #0
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800271a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800271e:	4618      	mov	r0, r3
 8002720:	3740      	adds	r7, #64	; 0x40
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d14d      	bne.n	80027e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fbe7 	bl	8002f24 <xTaskPriorityDisinherit>
 8002756:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	e043      	b.n	80027e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d119      	bne.n	800279a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	461a      	mov	r2, r3
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	f000 fe95 	bl	80034a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	441a      	add	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d32b      	bcc.n	80027e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e026      	b.n	80027e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68d8      	ldr	r0, [r3, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	461a      	mov	r2, r3
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	f000 fe7b 	bl	80034a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	425b      	negs	r3, r3
 80027b4:	441a      	add	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d207      	bcs.n	80027d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	425b      	negs	r3, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d105      	bne.n	80027e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027f0:	697b      	ldr	r3, [r7, #20]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002802:	f000 fc91 	bl	8003128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800280c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800280e:	e011      	b.n	8002834 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3324      	adds	r3, #36	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fa5d 	bl	8002cdc <xTaskRemoveFromEventList>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002828:	f000 fb32 	bl	8002e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	3b01      	subs	r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	dce9      	bgt.n	8002810 <prvUnlockQueue+0x16>
 800283c:	e000      	b.n	8002840 <prvUnlockQueue+0x46>
					break;
 800283e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002848:	f000 fc9e 	bl	8003188 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800284c:	f000 fc6c 	bl	8003128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002856:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002858:	e011      	b.n	800287e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3310      	adds	r3, #16
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fa38 	bl	8002cdc <xTaskRemoveFromEventList>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002872:	f000 fb0d 	bl	8002e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002876:	7bbb      	ldrb	r3, [r7, #14]
 8002878:	3b01      	subs	r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800287e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002882:	2b00      	cmp	r3, #0
 8002884:	dce9      	bgt.n	800285a <prvUnlockQueue+0x60>
 8002886:	e000      	b.n	800288a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002888:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002892:	f000 fc79 	bl	8003188 <vPortExitCritical>
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028a6:	f000 fc3f 	bl	8003128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d102      	bne.n	80028bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e001      	b.n	80028c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028c0:	f000 fc62 	bl	8003188 <vPortExitCritical>

	return xReturn;
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <vTaskSuspendAll+0x18>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <vTaskSuspendAll+0x18>)
 80028dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	200001b4 	.word	0x200001b4

080028ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <xTaskResumeAll+0x114>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <xTaskResumeAll+0x2c>
	__asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	603b      	str	r3, [r7, #0]
}
 8002914:	bf00      	nop
 8002916:	e7fe      	b.n	8002916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002918:	f000 fc06 	bl	8003128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800291c:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <xTaskResumeAll+0x114>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <xTaskResumeAll+0x114>)
 8002924:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <xTaskResumeAll+0x114>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d161      	bne.n	80029f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <xTaskResumeAll+0x118>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d05d      	beq.n	80029f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002936:	e02e      	b.n	8002996 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <xTaskResumeAll+0x11c>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3318      	adds	r3, #24
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd2a 	bl	800239e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3304      	adds	r3, #4
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fd25 	bl	800239e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2201      	movs	r2, #1
 800295a:	409a      	lsls	r2, r3
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <xTaskResumeAll+0x120>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4313      	orrs	r3, r2
 8002962:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <xTaskResumeAll+0x120>)
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <xTaskResumeAll+0x124>)
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3304      	adds	r3, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7ff fcb1 	bl	80022e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <xTaskResumeAll+0x128>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <xTaskResumeAll+0x12c>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <xTaskResumeAll+0x11c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cc      	bne.n	8002938 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029a4:	f000 fa80 	bl	8002ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <xTaskResumeAll+0x130>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d010      	beq.n	80029d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029b4:	f000 f836 	bl	8002a24 <xTaskIncrementTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <xTaskResumeAll+0x12c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f1      	bne.n	80029b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <xTaskResumeAll+0x130>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <xTaskResumeAll+0x12c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <xTaskResumeAll+0x134>)
 80029e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029f2:	f000 fbc9 	bl	8003188 <vPortExitCritical>

	return xAlreadyYielded;
 80029f6:	68bb      	ldr	r3, [r7, #8]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200001b4 	.word	0x200001b4
 8002a04:	20000194 	.word	0x20000194
 8002a08:	2000016c 	.word	0x2000016c
 8002a0c:	2000019c 	.word	0x2000019c
 8002a10:	200000d8 	.word	0x200000d8
 8002a14:	200000d4 	.word	0x200000d4
 8002a18:	200001a8 	.word	0x200001a8
 8002a1c:	200001a4 	.word	0x200001a4
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a2e:	4b4e      	ldr	r3, [pc, #312]	; (8002b68 <xTaskIncrementTick+0x144>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 808e 	bne.w	8002b54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <xTaskIncrementTick+0x148>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <xTaskIncrementTick+0x148>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d120      	bne.n	8002a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a4c:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <xTaskIncrementTick+0x14c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	603b      	str	r3, [r7, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <xTaskIncrementTick+0x46>
 8002a6c:	4b40      	ldr	r3, [pc, #256]	; (8002b70 <xTaskIncrementTick+0x14c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <xTaskIncrementTick+0x150>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <xTaskIncrementTick+0x14c>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4a3e      	ldr	r2, [pc, #248]	; (8002b74 <xTaskIncrementTick+0x150>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <xTaskIncrementTick+0x154>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	4a3c      	ldr	r2, [pc, #240]	; (8002b78 <xTaskIncrementTick+0x154>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	f000 fa0d 	bl	8002ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <xTaskIncrementTick+0x158>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d348      	bcc.n	8002b2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <xTaskIncrementTick+0x14c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <xTaskIncrementTick+0x158>)
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	601a      	str	r2, [r3, #0]
					break;
 8002aaa:	e03e      	b.n	8002b2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <xTaskIncrementTick+0x14c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d203      	bcs.n	8002acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <xTaskIncrementTick+0x158>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002aca:	e02e      	b.n	8002b2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc64 	bl	800239e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fc5b 	bl	800239e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <xTaskIncrementTick+0x15c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <xTaskIncrementTick+0x15c>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <xTaskIncrementTick+0x160>)
 8002b08:	441a      	add	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f7ff fbe7 	bl	80022e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <xTaskIncrementTick+0x164>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d3b9      	bcc.n	8002a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b28:	e7b6      	b.n	8002a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <xTaskIncrementTick+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	4914      	ldr	r1, [pc, #80]	; (8002b84 <xTaskIncrementTick+0x160>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d901      	bls.n	8002b46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <xTaskIncrementTick+0x168>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e004      	b.n	8002b5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <xTaskIncrementTick+0x16c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <xTaskIncrementTick+0x16c>)
 8002b5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b5e:	697b      	ldr	r3, [r7, #20]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200001b4 	.word	0x200001b4
 8002b6c:	20000198 	.word	0x20000198
 8002b70:	20000164 	.word	0x20000164
 8002b74:	20000168 	.word	0x20000168
 8002b78:	200001ac 	.word	0x200001ac
 8002b7c:	200001b0 	.word	0x200001b0
 8002b80:	2000019c 	.word	0x2000019c
 8002b84:	200000d8 	.word	0x200000d8
 8002b88:	200000d4 	.word	0x200000d4
 8002b8c:	200001a8 	.word	0x200001a8
 8002b90:	200001a4 	.word	0x200001a4

08002b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <vTaskSwitchContext+0xec>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <vTaskSwitchContext+0xf0>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ba8:	e066      	b.n	8002c78 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <vTaskSwitchContext+0xf0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <vTaskSwitchContext+0xf4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d111      	bne.n	8002bec <vTaskSwitchContext+0x58>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10b      	bne.n	8002bec <vTaskSwitchContext+0x58>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d105      	bne.n	8002bec <vTaskSwitchContext+0x58>
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	330c      	adds	r3, #12
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d008      	beq.n	8002bfe <vTaskSwitchContext+0x6a>
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <vTaskSwitchContext+0xf4>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <vTaskSwitchContext+0xf4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3334      	adds	r3, #52	; 0x34
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fd fc4d 	bl	8000498 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <vTaskSwitchContext+0xf8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	f1c3 031f 	rsb	r3, r3, #31
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	491e      	ldr	r1, [pc, #120]	; (8002c90 <vTaskSwitchContext+0xfc>)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <vTaskSwitchContext+0xaa>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	607b      	str	r3, [r7, #4]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <vTaskSwitchContext+0xa8>
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <vTaskSwitchContext+0xfc>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d104      	bne.n	8002c6e <vTaskSwitchContext+0xda>
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <vTaskSwitchContext+0xf4>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200001b4 	.word	0x200001b4
 8002c84:	200001a8 	.word	0x200001a8
 8002c88:	200000d4 	.word	0x200000d4
 8002c8c:	2000019c 	.word	0x2000019c
 8002c90:	200000d8 	.word	0x200000d8

08002c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60fb      	str	r3, [r7, #12]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <vTaskPlaceOnEventList+0x44>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3318      	adds	r3, #24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fb32 	bl	800232c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cc8:	2101      	movs	r1, #1
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	f000 f9b0 	bl	8003030 <prvAddCurrentTaskToDelayedList>
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200000d4 	.word	0x200000d4

08002cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	60fb      	str	r3, [r7, #12]
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3318      	adds	r3, #24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fb46 	bl	800239e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <xTaskRemoveFromEventList+0xac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11c      	bne.n	8002d54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fb3d 	bl	800239e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <xTaskRemoveFromEventList+0xb0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <xTaskRemoveFromEventList+0xb0>)
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <xTaskRemoveFromEventList+0xb4>)
 8002d44:	441a      	add	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7ff fac9 	bl	80022e4 <vListInsertEnd>
 8002d52:	e005      	b.n	8002d60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	3318      	adds	r3, #24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480e      	ldr	r0, [pc, #56]	; (8002d94 <xTaskRemoveFromEventList+0xb8>)
 8002d5c:	f7ff fac2 	bl	80022e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <xTaskRemoveFromEventList+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d905      	bls.n	8002d7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <xTaskRemoveFromEventList+0xc0>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e001      	b.n	8002d7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002d7e:	697b      	ldr	r3, [r7, #20]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200001b4 	.word	0x200001b4
 8002d8c:	2000019c 	.word	0x2000019c
 8002d90:	200000d8 	.word	0x200000d8
 8002d94:	2000016c 	.word	0x2000016c
 8002d98:	200000d4 	.word	0x200000d4
 8002d9c:	200001a8 	.word	0x200001a8

08002da0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <vTaskInternalSetTimeOutState+0x24>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <vTaskInternalSetTimeOutState+0x28>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	200001ac 	.word	0x200001ac
 8002dc8:	20000198 	.word	0x20000198

08002dcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	613b      	str	r3, [r7, #16]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60fb      	str	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e0e:	f000 f98b 	bl	8003128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <xTaskCheckForTimeOut+0xbc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d102      	bne.n	8002e32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	e023      	b.n	8002e7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <xTaskCheckForTimeOut+0xc0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d007      	beq.n	8002e4e <xTaskCheckForTimeOut+0x82>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e015      	b.n	8002e7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d20b      	bcs.n	8002e70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad2      	subs	r2, r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff9b 	bl	8002da0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e004      	b.n	8002e7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e7a:	f000 f985 	bl	8003188 <vPortExitCritical>

	return xReturn;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000198 	.word	0x20000198
 8002e8c:	200001ac 	.word	0x200001ac

08002e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <vTaskMissedYield+0x14>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	200001a8 	.word	0x200001a8

08002ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <prvResetNextTaskUnblockTime+0x38>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ec0:	e008      	b.n	8002ed4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <prvResetNextTaskUnblockTime+0x38>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	20000164 	.word	0x20000164
 8002ee4:	200001b0 	.word	0x200001b0

08002ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <xTaskGetSchedulerState+0x34>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	e008      	b.n	8002f0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <xTaskGetSchedulerState+0x38>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f04:	2302      	movs	r3, #2
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	e001      	b.n	8002f0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f0e:	687b      	ldr	r3, [r7, #4]
	}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	200001a0 	.word	0x200001a0
 8002f20:	200001b4 	.word	0x200001b4

08002f24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d06e      	beq.n	8003018 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <xTaskPriorityDisinherit+0x100>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d00a      	beq.n	8002f5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	60fb      	str	r3, [r7, #12]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	60bb      	str	r3, [r7, #8]
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d044      	beq.n	8003018 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d140      	bne.n	8003018 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f9ff 	bl	800239e <uxListRemove>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	491f      	ldr	r1, [pc, #124]	; (8003028 <xTaskPriorityDisinherit+0x104>)
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <xTaskPriorityDisinherit+0xae>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <xTaskPriorityDisinherit+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <xTaskPriorityDisinherit+0x108>)
 8002fd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f1c3 0207 	rsb	r2, r3, #7
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <xTaskPriorityDisinherit+0x108>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <xTaskPriorityDisinherit+0x108>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <xTaskPriorityDisinherit+0x104>)
 8003006:	441a      	add	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7ff f968 	bl	80022e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003018:	697b      	ldr	r3, [r7, #20]
	}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000d4 	.word	0x200000d4
 8003028:	200000d8 	.word	0x200000d8
 800302c:	2000019c 	.word	0x2000019c

08003030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3304      	adds	r3, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f9a9 	bl	800239e <uxListRemove>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	2201      	movs	r2, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4013      	ands	r3, r2
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d10a      	bne.n	8003088 <prvAddCurrentTaskToDelayedList+0x58>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	481a      	ldr	r0, [pc, #104]	; (80030ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003082:	f7ff f92f 	bl	80022e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003086:	e026      	b.n	80030d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	d209      	bcs.n	80030b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f7ff f93d 	bl	800232c <vListInsert>
}
 80030b2:	e010      	b.n	80030d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3304      	adds	r3, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7ff f933 	bl	800232c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d202      	bcs.n	80030d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80030d0:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000198 	.word	0x20000198
 80030e4:	200000d4 	.word	0x200000d4
 80030e8:	2000019c 	.word	0x2000019c
 80030ec:	20000180 	.word	0x20000180
 80030f0:	20000168 	.word	0x20000168
 80030f4:	20000164 	.word	0x20000164
 80030f8:	200001b0 	.word	0x200001b0
 80030fc:	00000000 	.word	0x00000000

08003100 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <pxCurrentTCBConst2>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6808      	ldr	r0, [r1, #0]
 8003106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310a:	f380 8809 	msr	PSP, r0
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f380 8811 	msr	BASEPRI, r0
 800311a:	4770      	bx	lr
 800311c:	f3af 8000 	nop.w

08003120 <pxCurrentTCBConst2>:
 8003120:	200000d4 	.word	0x200000d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop

08003128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
}
 8003140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <vPortEnterCritical+0x58>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <vPortEnterCritical+0x58>)
 800314a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <vPortEnterCritical+0x58>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10f      	bne.n	8003174 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <vPortEnterCritical+0x5c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <vPortEnterCritical+0x4c>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	603b      	str	r3, [r7, #0]
}
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <vPortEnterCritical+0x4a>
	}
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000004 	.word	0x20000004
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <vPortExitCritical+0x50>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <vPortExitCritical+0x24>
	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	607b      	str	r3, [r7, #4]
}
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <vPortExitCritical+0x50>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <vPortExitCritical+0x50>)
 80031b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <vPortExitCritical+0x50>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <vPortExitCritical+0x42>
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f383 8811 	msr	BASEPRI, r3
}
 80031c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000004 	.word	0x20000004
 80031dc:	00000000 	.word	0x00000000

080031e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031e0:	f3ef 8009 	mrs	r0, PSP
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <pxCurrentTCBConst>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f01e 0f10 	tst.w	lr, #16
 80031f0:	bf08      	it	eq
 80031f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fa:	6010      	str	r0, [r2, #0]
 80031fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003204:	f380 8811 	msr	BASEPRI, r0
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f7ff fcc0 	bl	8002b94 <vTaskSwitchContext>
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f380 8811 	msr	BASEPRI, r0
 800321c:	bc09      	pop	{r0, r3}
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	6808      	ldr	r0, [r1, #0]
 8003222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003226:	f01e 0f10 	tst.w	lr, #16
 800322a:	bf08      	it	eq
 800322c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003230:	f380 8809 	msr	PSP, r0
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	f3af 8000 	nop.w

08003240 <pxCurrentTCBConst>:
 8003240:	200000d4 	.word	0x200000d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop

08003248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
}
 8003260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003262:	f7ff fbdf 	bl	8002a24 <xTaskIncrementTick>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <SysTick_Handler+0x40>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f383 8811 	msr	BASEPRI, r3
}
 800327e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003292:	f3ef 8305 	mrs	r3, IPSR
 8003296:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d914      	bls.n	80032c8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <vPortValidateInterruptPriority+0x70>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <vPortValidateInterruptPriority+0x74>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	7afa      	ldrb	r2, [r7, #11]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d20a      	bcs.n	80032c8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	607b      	str	r3, [r7, #4]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <vPortValidateInterruptPriority+0x78>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <vPortValidateInterruptPriority+0x7c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d90a      	bls.n	80032ee <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	603b      	str	r3, [r7, #0]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vPortValidateInterruptPriority+0x60>
	}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e3f0 	.word	0xe000e3f0
 8003300:	200001b8 	.word	0x200001b8
 8003304:	e000ed0c 	.word	0xe000ed0c
 8003308:	200001bc 	.word	0x200001bc

0800330c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe feb4 	bl	8002088 <USBH_LL_IncTimer>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fef8 	bl	800212c <USBH_LL_Connect>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe ff0d 	bl	8002172 <USBH_LL_Disconnect>
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
 800336c:	4613      	mov	r3, r2
 800336e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ff2d 	bl	80021d6 <USBH_LL_NotifyURBChange>
#endif
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fea2 	bl	80020dc <USBH_LL_PortEnabled>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe feae 	bl	8002110 <USBH_LL_PortDisabled>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fa12 	bl	80007fc <HAL_HCD_Stop>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f808 	bl	80033f4 <USBH_Get_USB_Status>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80033e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d817      	bhi.n	8003438 <USBH_Get_USB_Status+0x44>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <USBH_Get_USB_Status+0x1c>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003427 	.word	0x08003427
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003433 	.word	0x08003433
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
    break;
 8003424:	e00b      	b.n	800343e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003426:	2302      	movs	r3, #2
 8003428:	73fb      	strb	r3, [r7, #15]
    break;
 800342a:	e008      	b.n	800343e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
    break;
 8003430:	e005      	b.n	800343e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003432:	2302      	movs	r3, #2
 8003434:	73fb      	strb	r3, [r7, #15]
    break;
 8003436:	e002      	b.n	800343e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003438:	2302      	movs	r3, #2
 800343a:	73fb      	strb	r3, [r7, #15]
    break;
 800343c:	bf00      	nop
  }
  return usb_status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <__errno>:
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <__errno+0x8>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000008 	.word	0x20000008

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	; (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	; (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	; (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	; (800349c <__libc_init_array+0x44>)
 800346c:	f000 fc86 	bl	8003d7c <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	08003dcc 	.word	0x08003dcc
 8003494:	08003dcc 	.word	0x08003dcc
 8003498:	08003dcc 	.word	0x08003dcc
 800349c:	08003dd0 	.word	0x08003dd0

080034a0 <memcpy>:
 80034a0:	440a      	add	r2, r1
 80034a2:	4291      	cmp	r1, r2
 80034a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034a8:	d100      	bne.n	80034ac <memcpy+0xc>
 80034aa:	4770      	bx	lr
 80034ac:	b510      	push	{r4, lr}
 80034ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034b6:	4291      	cmp	r1, r2
 80034b8:	d1f9      	bne.n	80034ae <memcpy+0xe>
 80034ba:	bd10      	pop	{r4, pc}

080034bc <_free_r>:
 80034bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034be:	2900      	cmp	r1, #0
 80034c0:	d044      	beq.n	800354c <_free_r+0x90>
 80034c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034c6:	9001      	str	r0, [sp, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f1a1 0404 	sub.w	r4, r1, #4
 80034ce:	bfb8      	it	lt
 80034d0:	18e4      	addlt	r4, r4, r3
 80034d2:	f000 f903 	bl	80036dc <__malloc_lock>
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <_free_r+0x94>)
 80034d8:	9801      	ldr	r0, [sp, #4]
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	b933      	cbnz	r3, 80034ec <_free_r+0x30>
 80034de:	6063      	str	r3, [r4, #4]
 80034e0:	6014      	str	r4, [r2, #0]
 80034e2:	b003      	add	sp, #12
 80034e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034e8:	f000 b8fe 	b.w	80036e8 <__malloc_unlock>
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d908      	bls.n	8003502 <_free_r+0x46>
 80034f0:	6825      	ldr	r5, [r4, #0]
 80034f2:	1961      	adds	r1, r4, r5
 80034f4:	428b      	cmp	r3, r1
 80034f6:	bf01      	itttt	eq
 80034f8:	6819      	ldreq	r1, [r3, #0]
 80034fa:	685b      	ldreq	r3, [r3, #4]
 80034fc:	1949      	addeq	r1, r1, r5
 80034fe:	6021      	streq	r1, [r4, #0]
 8003500:	e7ed      	b.n	80034de <_free_r+0x22>
 8003502:	461a      	mov	r2, r3
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	b10b      	cbz	r3, 800350c <_free_r+0x50>
 8003508:	42a3      	cmp	r3, r4
 800350a:	d9fa      	bls.n	8003502 <_free_r+0x46>
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	1855      	adds	r5, r2, r1
 8003510:	42a5      	cmp	r5, r4
 8003512:	d10b      	bne.n	800352c <_free_r+0x70>
 8003514:	6824      	ldr	r4, [r4, #0]
 8003516:	4421      	add	r1, r4
 8003518:	1854      	adds	r4, r2, r1
 800351a:	42a3      	cmp	r3, r4
 800351c:	6011      	str	r1, [r2, #0]
 800351e:	d1e0      	bne.n	80034e2 <_free_r+0x26>
 8003520:	681c      	ldr	r4, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	6053      	str	r3, [r2, #4]
 8003526:	4421      	add	r1, r4
 8003528:	6011      	str	r1, [r2, #0]
 800352a:	e7da      	b.n	80034e2 <_free_r+0x26>
 800352c:	d902      	bls.n	8003534 <_free_r+0x78>
 800352e:	230c      	movs	r3, #12
 8003530:	6003      	str	r3, [r0, #0]
 8003532:	e7d6      	b.n	80034e2 <_free_r+0x26>
 8003534:	6825      	ldr	r5, [r4, #0]
 8003536:	1961      	adds	r1, r4, r5
 8003538:	428b      	cmp	r3, r1
 800353a:	bf04      	itt	eq
 800353c:	6819      	ldreq	r1, [r3, #0]
 800353e:	685b      	ldreq	r3, [r3, #4]
 8003540:	6063      	str	r3, [r4, #4]
 8003542:	bf04      	itt	eq
 8003544:	1949      	addeq	r1, r1, r5
 8003546:	6021      	streq	r1, [r4, #0]
 8003548:	6054      	str	r4, [r2, #4]
 800354a:	e7ca      	b.n	80034e2 <_free_r+0x26>
 800354c:	b003      	add	sp, #12
 800354e:	bd30      	pop	{r4, r5, pc}
 8003550:	200004c4 	.word	0x200004c4

08003554 <sbrk_aligned>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4e0e      	ldr	r6, [pc, #56]	; (8003590 <sbrk_aligned+0x3c>)
 8003558:	460c      	mov	r4, r1
 800355a:	6831      	ldr	r1, [r6, #0]
 800355c:	4605      	mov	r5, r0
 800355e:	b911      	cbnz	r1, 8003566 <sbrk_aligned+0x12>
 8003560:	f000 f88c 	bl	800367c <_sbrk_r>
 8003564:	6030      	str	r0, [r6, #0]
 8003566:	4621      	mov	r1, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 f887 	bl	800367c <_sbrk_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d00a      	beq.n	8003588 <sbrk_aligned+0x34>
 8003572:	1cc4      	adds	r4, r0, #3
 8003574:	f024 0403 	bic.w	r4, r4, #3
 8003578:	42a0      	cmp	r0, r4
 800357a:	d007      	beq.n	800358c <sbrk_aligned+0x38>
 800357c:	1a21      	subs	r1, r4, r0
 800357e:	4628      	mov	r0, r5
 8003580:	f000 f87c 	bl	800367c <_sbrk_r>
 8003584:	3001      	adds	r0, #1
 8003586:	d101      	bne.n	800358c <sbrk_aligned+0x38>
 8003588:	f04f 34ff 	mov.w	r4, #4294967295
 800358c:	4620      	mov	r0, r4
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	200004c8 	.word	0x200004c8

08003594 <_malloc_r>:
 8003594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003598:	1ccd      	adds	r5, r1, #3
 800359a:	f025 0503 	bic.w	r5, r5, #3
 800359e:	3508      	adds	r5, #8
 80035a0:	2d0c      	cmp	r5, #12
 80035a2:	bf38      	it	cc
 80035a4:	250c      	movcc	r5, #12
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	4607      	mov	r7, r0
 80035aa:	db01      	blt.n	80035b0 <_malloc_r+0x1c>
 80035ac:	42a9      	cmp	r1, r5
 80035ae:	d905      	bls.n	80035bc <_malloc_r+0x28>
 80035b0:	230c      	movs	r3, #12
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	2600      	movs	r6, #0
 80035b6:	4630      	mov	r0, r6
 80035b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035bc:	4e2e      	ldr	r6, [pc, #184]	; (8003678 <_malloc_r+0xe4>)
 80035be:	f000 f88d 	bl	80036dc <__malloc_lock>
 80035c2:	6833      	ldr	r3, [r6, #0]
 80035c4:	461c      	mov	r4, r3
 80035c6:	bb34      	cbnz	r4, 8003616 <_malloc_r+0x82>
 80035c8:	4629      	mov	r1, r5
 80035ca:	4638      	mov	r0, r7
 80035cc:	f7ff ffc2 	bl	8003554 <sbrk_aligned>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	4604      	mov	r4, r0
 80035d4:	d14d      	bne.n	8003672 <_malloc_r+0xde>
 80035d6:	6834      	ldr	r4, [r6, #0]
 80035d8:	4626      	mov	r6, r4
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d140      	bne.n	8003660 <_malloc_r+0xcc>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	4631      	mov	r1, r6
 80035e2:	4638      	mov	r0, r7
 80035e4:	eb04 0803 	add.w	r8, r4, r3
 80035e8:	f000 f848 	bl	800367c <_sbrk_r>
 80035ec:	4580      	cmp	r8, r0
 80035ee:	d13a      	bne.n	8003666 <_malloc_r+0xd2>
 80035f0:	6821      	ldr	r1, [r4, #0]
 80035f2:	3503      	adds	r5, #3
 80035f4:	1a6d      	subs	r5, r5, r1
 80035f6:	f025 0503 	bic.w	r5, r5, #3
 80035fa:	3508      	adds	r5, #8
 80035fc:	2d0c      	cmp	r5, #12
 80035fe:	bf38      	it	cc
 8003600:	250c      	movcc	r5, #12
 8003602:	4629      	mov	r1, r5
 8003604:	4638      	mov	r0, r7
 8003606:	f7ff ffa5 	bl	8003554 <sbrk_aligned>
 800360a:	3001      	adds	r0, #1
 800360c:	d02b      	beq.n	8003666 <_malloc_r+0xd2>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	442b      	add	r3, r5
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	e00e      	b.n	8003634 <_malloc_r+0xa0>
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	1b52      	subs	r2, r2, r5
 800361a:	d41e      	bmi.n	800365a <_malloc_r+0xc6>
 800361c:	2a0b      	cmp	r2, #11
 800361e:	d916      	bls.n	800364e <_malloc_r+0xba>
 8003620:	1961      	adds	r1, r4, r5
 8003622:	42a3      	cmp	r3, r4
 8003624:	6025      	str	r5, [r4, #0]
 8003626:	bf18      	it	ne
 8003628:	6059      	strne	r1, [r3, #4]
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	bf08      	it	eq
 800362e:	6031      	streq	r1, [r6, #0]
 8003630:	5162      	str	r2, [r4, r5]
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	4638      	mov	r0, r7
 8003636:	f104 060b 	add.w	r6, r4, #11
 800363a:	f000 f855 	bl	80036e8 <__malloc_unlock>
 800363e:	f026 0607 	bic.w	r6, r6, #7
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	1af2      	subs	r2, r6, r3
 8003646:	d0b6      	beq.n	80035b6 <_malloc_r+0x22>
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	50a3      	str	r3, [r4, r2]
 800364c:	e7b3      	b.n	80035b6 <_malloc_r+0x22>
 800364e:	6862      	ldr	r2, [r4, #4]
 8003650:	42a3      	cmp	r3, r4
 8003652:	bf0c      	ite	eq
 8003654:	6032      	streq	r2, [r6, #0]
 8003656:	605a      	strne	r2, [r3, #4]
 8003658:	e7ec      	b.n	8003634 <_malloc_r+0xa0>
 800365a:	4623      	mov	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7b2      	b.n	80035c6 <_malloc_r+0x32>
 8003660:	4634      	mov	r4, r6
 8003662:	6876      	ldr	r6, [r6, #4]
 8003664:	e7b9      	b.n	80035da <_malloc_r+0x46>
 8003666:	230c      	movs	r3, #12
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4638      	mov	r0, r7
 800366c:	f000 f83c 	bl	80036e8 <__malloc_unlock>
 8003670:	e7a1      	b.n	80035b6 <_malloc_r+0x22>
 8003672:	6025      	str	r5, [r4, #0]
 8003674:	e7de      	b.n	8003634 <_malloc_r+0xa0>
 8003676:	bf00      	nop
 8003678:	200004c4 	.word	0x200004c4

0800367c <_sbrk_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4d06      	ldr	r5, [pc, #24]	; (8003698 <_sbrk_r+0x1c>)
 8003680:	2300      	movs	r3, #0
 8003682:	4604      	mov	r4, r0
 8003684:	4608      	mov	r0, r1
 8003686:	602b      	str	r3, [r5, #0]
 8003688:	f7fc ff3c 	bl	8000504 <_sbrk>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_sbrk_r+0x1a>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_sbrk_r+0x1a>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	200004cc 	.word	0x200004cc

0800369c <siprintf>:
 800369c:	b40e      	push	{r1, r2, r3}
 800369e:	b500      	push	{lr}
 80036a0:	b09c      	sub	sp, #112	; 0x70
 80036a2:	ab1d      	add	r3, sp, #116	; 0x74
 80036a4:	9002      	str	r0, [sp, #8]
 80036a6:	9006      	str	r0, [sp, #24]
 80036a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036ac:	4809      	ldr	r0, [pc, #36]	; (80036d4 <siprintf+0x38>)
 80036ae:	9107      	str	r1, [sp, #28]
 80036b0:	9104      	str	r1, [sp, #16]
 80036b2:	4909      	ldr	r1, [pc, #36]	; (80036d8 <siprintf+0x3c>)
 80036b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036b8:	9105      	str	r1, [sp, #20]
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	a902      	add	r1, sp, #8
 80036c0:	f000 f874 	bl	80037ac <_svfiprintf_r>
 80036c4:	9b02      	ldr	r3, [sp, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	b01c      	add	sp, #112	; 0x70
 80036cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d0:	b003      	add	sp, #12
 80036d2:	4770      	bx	lr
 80036d4:	20000008 	.word	0x20000008
 80036d8:	ffff0208 	.word	0xffff0208

080036dc <__malloc_lock>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__malloc_lock+0x8>)
 80036de:	f000 baf9 	b.w	8003cd4 <__retarget_lock_acquire_recursive>
 80036e2:	bf00      	nop
 80036e4:	200004d0 	.word	0x200004d0

080036e8 <__malloc_unlock>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__malloc_unlock+0x8>)
 80036ea:	f000 baf4 	b.w	8003cd6 <__retarget_lock_release_recursive>
 80036ee:	bf00      	nop
 80036f0:	200004d0 	.word	0x200004d0

080036f4 <__ssputs_r>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	688e      	ldr	r6, [r1, #8]
 80036fa:	429e      	cmp	r6, r3
 80036fc:	4682      	mov	sl, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	4690      	mov	r8, r2
 8003702:	461f      	mov	r7, r3
 8003704:	d838      	bhi.n	8003778 <__ssputs_r+0x84>
 8003706:	898a      	ldrh	r2, [r1, #12]
 8003708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800370c:	d032      	beq.n	8003774 <__ssputs_r+0x80>
 800370e:	6825      	ldr	r5, [r4, #0]
 8003710:	6909      	ldr	r1, [r1, #16]
 8003712:	eba5 0901 	sub.w	r9, r5, r1
 8003716:	6965      	ldr	r5, [r4, #20]
 8003718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800371c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003720:	3301      	adds	r3, #1
 8003722:	444b      	add	r3, r9
 8003724:	106d      	asrs	r5, r5, #1
 8003726:	429d      	cmp	r5, r3
 8003728:	bf38      	it	cc
 800372a:	461d      	movcc	r5, r3
 800372c:	0553      	lsls	r3, r2, #21
 800372e:	d531      	bpl.n	8003794 <__ssputs_r+0xa0>
 8003730:	4629      	mov	r1, r5
 8003732:	f7ff ff2f 	bl	8003594 <_malloc_r>
 8003736:	4606      	mov	r6, r0
 8003738:	b950      	cbnz	r0, 8003750 <__ssputs_r+0x5c>
 800373a:	230c      	movs	r3, #12
 800373c:	f8ca 3000 	str.w	r3, [sl]
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003746:	81a3      	strh	r3, [r4, #12]
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	6921      	ldr	r1, [r4, #16]
 8003752:	464a      	mov	r2, r9
 8003754:	f7ff fea4 	bl	80034a0 <memcpy>
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003762:	81a3      	strh	r3, [r4, #12]
 8003764:	6126      	str	r6, [r4, #16]
 8003766:	6165      	str	r5, [r4, #20]
 8003768:	444e      	add	r6, r9
 800376a:	eba5 0509 	sub.w	r5, r5, r9
 800376e:	6026      	str	r6, [r4, #0]
 8003770:	60a5      	str	r5, [r4, #8]
 8003772:	463e      	mov	r6, r7
 8003774:	42be      	cmp	r6, r7
 8003776:	d900      	bls.n	800377a <__ssputs_r+0x86>
 8003778:	463e      	mov	r6, r7
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	4632      	mov	r2, r6
 800377e:	4641      	mov	r1, r8
 8003780:	f000 faaa 	bl	8003cd8 <memmove>
 8003784:	68a3      	ldr	r3, [r4, #8]
 8003786:	1b9b      	subs	r3, r3, r6
 8003788:	60a3      	str	r3, [r4, #8]
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	4433      	add	r3, r6
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	2000      	movs	r0, #0
 8003792:	e7db      	b.n	800374c <__ssputs_r+0x58>
 8003794:	462a      	mov	r2, r5
 8003796:	f000 fab9 	bl	8003d0c <_realloc_r>
 800379a:	4606      	mov	r6, r0
 800379c:	2800      	cmp	r0, #0
 800379e:	d1e1      	bne.n	8003764 <__ssputs_r+0x70>
 80037a0:	6921      	ldr	r1, [r4, #16]
 80037a2:	4650      	mov	r0, sl
 80037a4:	f7ff fe8a 	bl	80034bc <_free_r>
 80037a8:	e7c7      	b.n	800373a <__ssputs_r+0x46>
	...

080037ac <_svfiprintf_r>:
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	4698      	mov	r8, r3
 80037b2:	898b      	ldrh	r3, [r1, #12]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	b09d      	sub	sp, #116	; 0x74
 80037b8:	4607      	mov	r7, r0
 80037ba:	460d      	mov	r5, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	d50e      	bpl.n	80037de <_svfiprintf_r+0x32>
 80037c0:	690b      	ldr	r3, [r1, #16]
 80037c2:	b963      	cbnz	r3, 80037de <_svfiprintf_r+0x32>
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	f7ff fee5 	bl	8003594 <_malloc_r>
 80037ca:	6028      	str	r0, [r5, #0]
 80037cc:	6128      	str	r0, [r5, #16]
 80037ce:	b920      	cbnz	r0, 80037da <_svfiprintf_r+0x2e>
 80037d0:	230c      	movs	r3, #12
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	e0d1      	b.n	800397e <_svfiprintf_r+0x1d2>
 80037da:	2340      	movs	r3, #64	; 0x40
 80037dc:	616b      	str	r3, [r5, #20]
 80037de:	2300      	movs	r3, #0
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	2320      	movs	r3, #32
 80037e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80037ec:	2330      	movs	r3, #48	; 0x30
 80037ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003998 <_svfiprintf_r+0x1ec>
 80037f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037f6:	f04f 0901 	mov.w	r9, #1
 80037fa:	4623      	mov	r3, r4
 80037fc:	469a      	mov	sl, r3
 80037fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003802:	b10a      	cbz	r2, 8003808 <_svfiprintf_r+0x5c>
 8003804:	2a25      	cmp	r2, #37	; 0x25
 8003806:	d1f9      	bne.n	80037fc <_svfiprintf_r+0x50>
 8003808:	ebba 0b04 	subs.w	fp, sl, r4
 800380c:	d00b      	beq.n	8003826 <_svfiprintf_r+0x7a>
 800380e:	465b      	mov	r3, fp
 8003810:	4622      	mov	r2, r4
 8003812:	4629      	mov	r1, r5
 8003814:	4638      	mov	r0, r7
 8003816:	f7ff ff6d 	bl	80036f4 <__ssputs_r>
 800381a:	3001      	adds	r0, #1
 800381c:	f000 80aa 	beq.w	8003974 <_svfiprintf_r+0x1c8>
 8003820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003822:	445a      	add	r2, fp
 8003824:	9209      	str	r2, [sp, #36]	; 0x24
 8003826:	f89a 3000 	ldrb.w	r3, [sl]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a2 	beq.w	8003974 <_svfiprintf_r+0x1c8>
 8003830:	2300      	movs	r3, #0
 8003832:	f04f 32ff 	mov.w	r2, #4294967295
 8003836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800383a:	f10a 0a01 	add.w	sl, sl, #1
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	9307      	str	r3, [sp, #28]
 8003842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003846:	931a      	str	r3, [sp, #104]	; 0x68
 8003848:	4654      	mov	r4, sl
 800384a:	2205      	movs	r2, #5
 800384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003850:	4851      	ldr	r0, [pc, #324]	; (8003998 <_svfiprintf_r+0x1ec>)
 8003852:	f7fc fcd5 	bl	8000200 <memchr>
 8003856:	9a04      	ldr	r2, [sp, #16]
 8003858:	b9d8      	cbnz	r0, 8003892 <_svfiprintf_r+0xe6>
 800385a:	06d0      	lsls	r0, r2, #27
 800385c:	bf44      	itt	mi
 800385e:	2320      	movmi	r3, #32
 8003860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003864:	0711      	lsls	r1, r2, #28
 8003866:	bf44      	itt	mi
 8003868:	232b      	movmi	r3, #43	; 0x2b
 800386a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800386e:	f89a 3000 	ldrb.w	r3, [sl]
 8003872:	2b2a      	cmp	r3, #42	; 0x2a
 8003874:	d015      	beq.n	80038a2 <_svfiprintf_r+0xf6>
 8003876:	9a07      	ldr	r2, [sp, #28]
 8003878:	4654      	mov	r4, sl
 800387a:	2000      	movs	r0, #0
 800387c:	f04f 0c0a 	mov.w	ip, #10
 8003880:	4621      	mov	r1, r4
 8003882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003886:	3b30      	subs	r3, #48	; 0x30
 8003888:	2b09      	cmp	r3, #9
 800388a:	d94e      	bls.n	800392a <_svfiprintf_r+0x17e>
 800388c:	b1b0      	cbz	r0, 80038bc <_svfiprintf_r+0x110>
 800388e:	9207      	str	r2, [sp, #28]
 8003890:	e014      	b.n	80038bc <_svfiprintf_r+0x110>
 8003892:	eba0 0308 	sub.w	r3, r0, r8
 8003896:	fa09 f303 	lsl.w	r3, r9, r3
 800389a:	4313      	orrs	r3, r2
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	46a2      	mov	sl, r4
 80038a0:	e7d2      	b.n	8003848 <_svfiprintf_r+0x9c>
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	1d19      	adds	r1, r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	9103      	str	r1, [sp, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfbb      	ittet	lt
 80038ae:	425b      	neglt	r3, r3
 80038b0:	f042 0202 	orrlt.w	r2, r2, #2
 80038b4:	9307      	strge	r3, [sp, #28]
 80038b6:	9307      	strlt	r3, [sp, #28]
 80038b8:	bfb8      	it	lt
 80038ba:	9204      	strlt	r2, [sp, #16]
 80038bc:	7823      	ldrb	r3, [r4, #0]
 80038be:	2b2e      	cmp	r3, #46	; 0x2e
 80038c0:	d10c      	bne.n	80038dc <_svfiprintf_r+0x130>
 80038c2:	7863      	ldrb	r3, [r4, #1]
 80038c4:	2b2a      	cmp	r3, #42	; 0x2a
 80038c6:	d135      	bne.n	8003934 <_svfiprintf_r+0x188>
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bfb8      	it	lt
 80038d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80038d8:	3402      	adds	r4, #2
 80038da:	9305      	str	r3, [sp, #20]
 80038dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039a8 <_svfiprintf_r+0x1fc>
 80038e0:	7821      	ldrb	r1, [r4, #0]
 80038e2:	2203      	movs	r2, #3
 80038e4:	4650      	mov	r0, sl
 80038e6:	f7fc fc8b 	bl	8000200 <memchr>
 80038ea:	b140      	cbz	r0, 80038fe <_svfiprintf_r+0x152>
 80038ec:	2340      	movs	r3, #64	; 0x40
 80038ee:	eba0 000a 	sub.w	r0, r0, sl
 80038f2:	fa03 f000 	lsl.w	r0, r3, r0
 80038f6:	9b04      	ldr	r3, [sp, #16]
 80038f8:	4303      	orrs	r3, r0
 80038fa:	3401      	adds	r4, #1
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003902:	4826      	ldr	r0, [pc, #152]	; (800399c <_svfiprintf_r+0x1f0>)
 8003904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003908:	2206      	movs	r2, #6
 800390a:	f7fc fc79 	bl	8000200 <memchr>
 800390e:	2800      	cmp	r0, #0
 8003910:	d038      	beq.n	8003984 <_svfiprintf_r+0x1d8>
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <_svfiprintf_r+0x1f4>)
 8003914:	bb1b      	cbnz	r3, 800395e <_svfiprintf_r+0x1b2>
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	3307      	adds	r3, #7
 800391a:	f023 0307 	bic.w	r3, r3, #7
 800391e:	3308      	adds	r3, #8
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003924:	4433      	add	r3, r6
 8003926:	9309      	str	r3, [sp, #36]	; 0x24
 8003928:	e767      	b.n	80037fa <_svfiprintf_r+0x4e>
 800392a:	fb0c 3202 	mla	r2, ip, r2, r3
 800392e:	460c      	mov	r4, r1
 8003930:	2001      	movs	r0, #1
 8003932:	e7a5      	b.n	8003880 <_svfiprintf_r+0xd4>
 8003934:	2300      	movs	r3, #0
 8003936:	3401      	adds	r4, #1
 8003938:	9305      	str	r3, [sp, #20]
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 0c0a 	mov.w	ip, #10
 8003940:	4620      	mov	r0, r4
 8003942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003946:	3a30      	subs	r2, #48	; 0x30
 8003948:	2a09      	cmp	r2, #9
 800394a:	d903      	bls.n	8003954 <_svfiprintf_r+0x1a8>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0c5      	beq.n	80038dc <_svfiprintf_r+0x130>
 8003950:	9105      	str	r1, [sp, #20]
 8003952:	e7c3      	b.n	80038dc <_svfiprintf_r+0x130>
 8003954:	fb0c 2101 	mla	r1, ip, r1, r2
 8003958:	4604      	mov	r4, r0
 800395a:	2301      	movs	r3, #1
 800395c:	e7f0      	b.n	8003940 <_svfiprintf_r+0x194>
 800395e:	ab03      	add	r3, sp, #12
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	462a      	mov	r2, r5
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <_svfiprintf_r+0x1f8>)
 8003966:	a904      	add	r1, sp, #16
 8003968:	4638      	mov	r0, r7
 800396a:	f3af 8000 	nop.w
 800396e:	1c42      	adds	r2, r0, #1
 8003970:	4606      	mov	r6, r0
 8003972:	d1d6      	bne.n	8003922 <_svfiprintf_r+0x176>
 8003974:	89ab      	ldrh	r3, [r5, #12]
 8003976:	065b      	lsls	r3, r3, #25
 8003978:	f53f af2c 	bmi.w	80037d4 <_svfiprintf_r+0x28>
 800397c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800397e:	b01d      	add	sp, #116	; 0x74
 8003980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003984:	ab03      	add	r3, sp, #12
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	462a      	mov	r2, r5
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <_svfiprintf_r+0x1f8>)
 800398c:	a904      	add	r1, sp, #16
 800398e:	4638      	mov	r0, r7
 8003990:	f000 f87a 	bl	8003a88 <_printf_i>
 8003994:	e7eb      	b.n	800396e <_svfiprintf_r+0x1c2>
 8003996:	bf00      	nop
 8003998:	08003d99 	.word	0x08003d99
 800399c:	08003da3 	.word	0x08003da3
 80039a0:	00000000 	.word	0x00000000
 80039a4:	080036f5 	.word	0x080036f5
 80039a8:	08003d9f 	.word	0x08003d9f

080039ac <_printf_common>:
 80039ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	4616      	mov	r6, r2
 80039b2:	4699      	mov	r9, r3
 80039b4:	688a      	ldr	r2, [r1, #8]
 80039b6:	690b      	ldr	r3, [r1, #16]
 80039b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039bc:	4293      	cmp	r3, r2
 80039be:	bfb8      	it	lt
 80039c0:	4613      	movlt	r3, r2
 80039c2:	6033      	str	r3, [r6, #0]
 80039c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c8:	4607      	mov	r7, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	b10a      	cbz	r2, 80039d2 <_printf_common+0x26>
 80039ce:	3301      	adds	r3, #1
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	0699      	lsls	r1, r3, #26
 80039d6:	bf42      	ittt	mi
 80039d8:	6833      	ldrmi	r3, [r6, #0]
 80039da:	3302      	addmi	r3, #2
 80039dc:	6033      	strmi	r3, [r6, #0]
 80039de:	6825      	ldr	r5, [r4, #0]
 80039e0:	f015 0506 	ands.w	r5, r5, #6
 80039e4:	d106      	bne.n	80039f4 <_printf_common+0x48>
 80039e6:	f104 0a19 	add.w	sl, r4, #25
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	6832      	ldr	r2, [r6, #0]
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	42ab      	cmp	r3, r5
 80039f2:	dc26      	bgt.n	8003a42 <_printf_common+0x96>
 80039f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039f8:	1e13      	subs	r3, r2, #0
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	bf18      	it	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	0692      	lsls	r2, r2, #26
 8003a02:	d42b      	bmi.n	8003a5c <_printf_common+0xb0>
 8003a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a08:	4649      	mov	r1, r9
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	47c0      	blx	r8
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d01e      	beq.n	8003a50 <_printf_common+0xa4>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	68e5      	ldr	r5, [r4, #12]
 8003a16:	6832      	ldr	r2, [r6, #0]
 8003a18:	f003 0306 	and.w	r3, r3, #6
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	bf08      	it	eq
 8003a20:	1aad      	subeq	r5, r5, r2
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	bf0c      	ite	eq
 8003a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a2c:	2500      	movne	r5, #0
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	bfc4      	itt	gt
 8003a32:	1a9b      	subgt	r3, r3, r2
 8003a34:	18ed      	addgt	r5, r5, r3
 8003a36:	2600      	movs	r6, #0
 8003a38:	341a      	adds	r4, #26
 8003a3a:	42b5      	cmp	r5, r6
 8003a3c:	d11a      	bne.n	8003a74 <_printf_common+0xc8>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e008      	b.n	8003a54 <_printf_common+0xa8>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4652      	mov	r2, sl
 8003a46:	4649      	mov	r1, r9
 8003a48:	4638      	mov	r0, r7
 8003a4a:	47c0      	blx	r8
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d103      	bne.n	8003a58 <_printf_common+0xac>
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	3501      	adds	r5, #1
 8003a5a:	e7c6      	b.n	80039ea <_printf_common+0x3e>
 8003a5c:	18e1      	adds	r1, r4, r3
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	2030      	movs	r0, #48	; 0x30
 8003a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a66:	4422      	add	r2, r4
 8003a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a70:	3302      	adds	r3, #2
 8003a72:	e7c7      	b.n	8003a04 <_printf_common+0x58>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4622      	mov	r2, r4
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	47c0      	blx	r8
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d0e6      	beq.n	8003a50 <_printf_common+0xa4>
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7d9      	b.n	8003a3a <_printf_common+0x8e>
	...

08003a88 <_printf_i>:
 8003a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	7e0f      	ldrb	r7, [r1, #24]
 8003a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a90:	2f78      	cmp	r7, #120	; 0x78
 8003a92:	4691      	mov	r9, r2
 8003a94:	4680      	mov	r8, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	469a      	mov	sl, r3
 8003a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a9e:	d807      	bhi.n	8003ab0 <_printf_i+0x28>
 8003aa0:	2f62      	cmp	r7, #98	; 0x62
 8003aa2:	d80a      	bhi.n	8003aba <_printf_i+0x32>
 8003aa4:	2f00      	cmp	r7, #0
 8003aa6:	f000 80d8 	beq.w	8003c5a <_printf_i+0x1d2>
 8003aaa:	2f58      	cmp	r7, #88	; 0x58
 8003aac:	f000 80a3 	beq.w	8003bf6 <_printf_i+0x16e>
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ab8:	e03a      	b.n	8003b30 <_printf_i+0xa8>
 8003aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003abe:	2b15      	cmp	r3, #21
 8003ac0:	d8f6      	bhi.n	8003ab0 <_printf_i+0x28>
 8003ac2:	a101      	add	r1, pc, #4	; (adr r1, 8003ac8 <_printf_i+0x40>)
 8003ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac8:	08003b21 	.word	0x08003b21
 8003acc:	08003b35 	.word	0x08003b35
 8003ad0:	08003ab1 	.word	0x08003ab1
 8003ad4:	08003ab1 	.word	0x08003ab1
 8003ad8:	08003ab1 	.word	0x08003ab1
 8003adc:	08003ab1 	.word	0x08003ab1
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003ab1 	.word	0x08003ab1
 8003ae8:	08003ab1 	.word	0x08003ab1
 8003aec:	08003ab1 	.word	0x08003ab1
 8003af0:	08003ab1 	.word	0x08003ab1
 8003af4:	08003c41 	.word	0x08003c41
 8003af8:	08003b65 	.word	0x08003b65
 8003afc:	08003c23 	.word	0x08003c23
 8003b00:	08003ab1 	.word	0x08003ab1
 8003b04:	08003ab1 	.word	0x08003ab1
 8003b08:	08003c63 	.word	0x08003c63
 8003b0c:	08003ab1 	.word	0x08003ab1
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003ab1 	.word	0x08003ab1
 8003b18:	08003ab1 	.word	0x08003ab1
 8003b1c:	08003c2b 	.word	0x08003c2b
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	602a      	str	r2, [r5, #0]
 8003b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0a3      	b.n	8003c7c <_printf_i+0x1f4>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	6829      	ldr	r1, [r5, #0]
 8003b38:	0606      	lsls	r6, r0, #24
 8003b3a:	f101 0304 	add.w	r3, r1, #4
 8003b3e:	d50a      	bpl.n	8003b56 <_printf_i+0xce>
 8003b40:	680e      	ldr	r6, [r1, #0]
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	da03      	bge.n	8003b50 <_printf_i+0xc8>
 8003b48:	232d      	movs	r3, #45	; 0x2d
 8003b4a:	4276      	negs	r6, r6
 8003b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b50:	485e      	ldr	r0, [pc, #376]	; (8003ccc <_printf_i+0x244>)
 8003b52:	230a      	movs	r3, #10
 8003b54:	e019      	b.n	8003b8a <_printf_i+0x102>
 8003b56:	680e      	ldr	r6, [r1, #0]
 8003b58:	602b      	str	r3, [r5, #0]
 8003b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b5e:	bf18      	it	ne
 8003b60:	b236      	sxthne	r6, r6
 8003b62:	e7ef      	b.n	8003b44 <_printf_i+0xbc>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	1d19      	adds	r1, r3, #4
 8003b6a:	6029      	str	r1, [r5, #0]
 8003b6c:	0601      	lsls	r1, r0, #24
 8003b6e:	d501      	bpl.n	8003b74 <_printf_i+0xec>
 8003b70:	681e      	ldr	r6, [r3, #0]
 8003b72:	e002      	b.n	8003b7a <_printf_i+0xf2>
 8003b74:	0646      	lsls	r6, r0, #25
 8003b76:	d5fb      	bpl.n	8003b70 <_printf_i+0xe8>
 8003b78:	881e      	ldrh	r6, [r3, #0]
 8003b7a:	4854      	ldr	r0, [pc, #336]	; (8003ccc <_printf_i+0x244>)
 8003b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b7e:	bf0c      	ite	eq
 8003b80:	2308      	moveq	r3, #8
 8003b82:	230a      	movne	r3, #10
 8003b84:	2100      	movs	r1, #0
 8003b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b8a:	6865      	ldr	r5, [r4, #4]
 8003b8c:	60a5      	str	r5, [r4, #8]
 8003b8e:	2d00      	cmp	r5, #0
 8003b90:	bfa2      	ittt	ge
 8003b92:	6821      	ldrge	r1, [r4, #0]
 8003b94:	f021 0104 	bicge.w	r1, r1, #4
 8003b98:	6021      	strge	r1, [r4, #0]
 8003b9a:	b90e      	cbnz	r6, 8003ba0 <_printf_i+0x118>
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	d04d      	beq.n	8003c3c <_printf_i+0x1b4>
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8003baa:	5dc7      	ldrb	r7, [r0, r7]
 8003bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bb0:	4637      	mov	r7, r6
 8003bb2:	42bb      	cmp	r3, r7
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	d9f4      	bls.n	8003ba2 <_printf_i+0x11a>
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d10b      	bne.n	8003bd4 <_printf_i+0x14c>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	07de      	lsls	r6, r3, #31
 8003bc0:	d508      	bpl.n	8003bd4 <_printf_i+0x14c>
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	6861      	ldr	r1, [r4, #4]
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	bfde      	ittt	le
 8003bca:	2330      	movle	r3, #48	; 0x30
 8003bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bd4:	1b52      	subs	r2, r2, r5
 8003bd6:	6122      	str	r2, [r4, #16]
 8003bd8:	f8cd a000 	str.w	sl, [sp]
 8003bdc:	464b      	mov	r3, r9
 8003bde:	aa03      	add	r2, sp, #12
 8003be0:	4621      	mov	r1, r4
 8003be2:	4640      	mov	r0, r8
 8003be4:	f7ff fee2 	bl	80039ac <_printf_common>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d14c      	bne.n	8003c86 <_printf_i+0x1fe>
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	b004      	add	sp, #16
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	4835      	ldr	r0, [pc, #212]	; (8003ccc <_printf_i+0x244>)
 8003bf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bfc:	6829      	ldr	r1, [r5, #0]
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c04:	6029      	str	r1, [r5, #0]
 8003c06:	061d      	lsls	r5, r3, #24
 8003c08:	d514      	bpl.n	8003c34 <_printf_i+0x1ac>
 8003c0a:	07df      	lsls	r7, r3, #31
 8003c0c:	bf44      	itt	mi
 8003c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c12:	6023      	strmi	r3, [r4, #0]
 8003c14:	b91e      	cbnz	r6, 8003c1e <_printf_i+0x196>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f023 0320 	bic.w	r3, r3, #32
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	2310      	movs	r3, #16
 8003c20:	e7b0      	b.n	8003b84 <_printf_i+0xfc>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f043 0320 	orr.w	r3, r3, #32
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	2378      	movs	r3, #120	; 0x78
 8003c2c:	4828      	ldr	r0, [pc, #160]	; (8003cd0 <_printf_i+0x248>)
 8003c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c32:	e7e3      	b.n	8003bfc <_printf_i+0x174>
 8003c34:	0659      	lsls	r1, r3, #25
 8003c36:	bf48      	it	mi
 8003c38:	b2b6      	uxthmi	r6, r6
 8003c3a:	e7e6      	b.n	8003c0a <_printf_i+0x182>
 8003c3c:	4615      	mov	r5, r2
 8003c3e:	e7bb      	b.n	8003bb8 <_printf_i+0x130>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	6826      	ldr	r6, [r4, #0]
 8003c44:	6961      	ldr	r1, [r4, #20]
 8003c46:	1d18      	adds	r0, r3, #4
 8003c48:	6028      	str	r0, [r5, #0]
 8003c4a:	0635      	lsls	r5, r6, #24
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	d501      	bpl.n	8003c54 <_printf_i+0x1cc>
 8003c50:	6019      	str	r1, [r3, #0]
 8003c52:	e002      	b.n	8003c5a <_printf_i+0x1d2>
 8003c54:	0670      	lsls	r0, r6, #25
 8003c56:	d5fb      	bpl.n	8003c50 <_printf_i+0x1c8>
 8003c58:	8019      	strh	r1, [r3, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	4615      	mov	r5, r2
 8003c60:	e7ba      	b.n	8003bd8 <_printf_i+0x150>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	1d1a      	adds	r2, r3, #4
 8003c66:	602a      	str	r2, [r5, #0]
 8003c68:	681d      	ldr	r5, [r3, #0]
 8003c6a:	6862      	ldr	r2, [r4, #4]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f7fc fac6 	bl	8000200 <memchr>
 8003c74:	b108      	cbz	r0, 8003c7a <_printf_i+0x1f2>
 8003c76:	1b40      	subs	r0, r0, r5
 8003c78:	6060      	str	r0, [r4, #4]
 8003c7a:	6863      	ldr	r3, [r4, #4]
 8003c7c:	6123      	str	r3, [r4, #16]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c84:	e7a8      	b.n	8003bd8 <_printf_i+0x150>
 8003c86:	6923      	ldr	r3, [r4, #16]
 8003c88:	462a      	mov	r2, r5
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	47d0      	blx	sl
 8003c90:	3001      	adds	r0, #1
 8003c92:	d0ab      	beq.n	8003bec <_printf_i+0x164>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	079b      	lsls	r3, r3, #30
 8003c98:	d413      	bmi.n	8003cc2 <_printf_i+0x23a>
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	bfb8      	it	lt
 8003ca2:	4618      	movlt	r0, r3
 8003ca4:	e7a4      	b.n	8003bf0 <_printf_i+0x168>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4632      	mov	r2, r6
 8003caa:	4649      	mov	r1, r9
 8003cac:	4640      	mov	r0, r8
 8003cae:	47d0      	blx	sl
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d09b      	beq.n	8003bec <_printf_i+0x164>
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	9903      	ldr	r1, [sp, #12]
 8003cba:	1a5b      	subs	r3, r3, r1
 8003cbc:	42ab      	cmp	r3, r5
 8003cbe:	dcf2      	bgt.n	8003ca6 <_printf_i+0x21e>
 8003cc0:	e7eb      	b.n	8003c9a <_printf_i+0x212>
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	f104 0619 	add.w	r6, r4, #25
 8003cc8:	e7f5      	b.n	8003cb6 <_printf_i+0x22e>
 8003cca:	bf00      	nop
 8003ccc:	08003daa 	.word	0x08003daa
 8003cd0:	08003dbb 	.word	0x08003dbb

08003cd4 <__retarget_lock_acquire_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <__retarget_lock_release_recursive>:
 8003cd6:	4770      	bx	lr

08003cd8 <memmove>:
 8003cd8:	4288      	cmp	r0, r1
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	eb01 0402 	add.w	r4, r1, r2
 8003ce0:	d902      	bls.n	8003ce8 <memmove+0x10>
 8003ce2:	4284      	cmp	r4, r0
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	d807      	bhi.n	8003cf8 <memmove+0x20>
 8003ce8:	1e43      	subs	r3, r0, #1
 8003cea:	42a1      	cmp	r1, r4
 8003cec:	d008      	beq.n	8003d00 <memmove+0x28>
 8003cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cf6:	e7f8      	b.n	8003cea <memmove+0x12>
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	428a      	cmp	r2, r1
 8003cfe:	d100      	bne.n	8003d02 <memmove+0x2a>
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d0a:	e7f7      	b.n	8003cfc <memmove+0x24>

08003d0c <_realloc_r>:
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	4680      	mov	r8, r0
 8003d12:	4614      	mov	r4, r2
 8003d14:	460e      	mov	r6, r1
 8003d16:	b921      	cbnz	r1, 8003d22 <_realloc_r+0x16>
 8003d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	f7ff bc39 	b.w	8003594 <_malloc_r>
 8003d22:	b92a      	cbnz	r2, 8003d30 <_realloc_r+0x24>
 8003d24:	f7ff fbca 	bl	80034bc <_free_r>
 8003d28:	4625      	mov	r5, r4
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d30:	f000 f81b 	bl	8003d6a <_malloc_usable_size_r>
 8003d34:	4284      	cmp	r4, r0
 8003d36:	4607      	mov	r7, r0
 8003d38:	d802      	bhi.n	8003d40 <_realloc_r+0x34>
 8003d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d3e:	d812      	bhi.n	8003d66 <_realloc_r+0x5a>
 8003d40:	4621      	mov	r1, r4
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7ff fc26 	bl	8003594 <_malloc_r>
 8003d48:	4605      	mov	r5, r0
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0ed      	beq.n	8003d2a <_realloc_r+0x1e>
 8003d4e:	42bc      	cmp	r4, r7
 8003d50:	4622      	mov	r2, r4
 8003d52:	4631      	mov	r1, r6
 8003d54:	bf28      	it	cs
 8003d56:	463a      	movcs	r2, r7
 8003d58:	f7ff fba2 	bl	80034a0 <memcpy>
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f7ff fbac 	bl	80034bc <_free_r>
 8003d64:	e7e1      	b.n	8003d2a <_realloc_r+0x1e>
 8003d66:	4635      	mov	r5, r6
 8003d68:	e7df      	b.n	8003d2a <_realloc_r+0x1e>

08003d6a <_malloc_usable_size_r>:
 8003d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6e:	1f18      	subs	r0, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfbc      	itt	lt
 8003d74:	580b      	ldrlt	r3, [r1, r0]
 8003d76:	18c0      	addlt	r0, r0, r3
 8003d78:	4770      	bx	lr
	...

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
